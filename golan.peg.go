package golan

// Code generated by peg golan.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleroot
	ruleEOT
	ruleexpression
	ruleassign
	ruleadditive
	rulemultitive
	ruleprimary
	ruleidentifier
	rule_
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	rulePegText
	ruleAction6
	ruleAction7
)

var rul3s = [...]string{
	"Unknown",
	"root",
	"EOT",
	"expression",
	"assign",
	"additive",
	"multitive",
	"primary",
	"identifier",
	"_",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"PegText",
	"Action6",
	"Action7",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	ASTBuilder

	Buffer string
	buffer []rune
	rules  [19]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *Parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.PushAssign()
		case ruleAction1:
			p.PushBinOp("+")
		case ruleAction2:
			p.PushBinOp("-")
		case ruleAction3:
			p.PushBinOp("*")
		case ruleAction4:
			p.PushBinOp("/")
		case ruleAction5:
			p.PushBinOp("%")
		case ruleAction6:
			p.PushIntLiteral(begin, end, text)
		case ruleAction7:
			p.PushIdentifier(begin, end, text)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 root <- <(expression EOT)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleexpression]() {
					goto l0
				}
				if !_rules[ruleEOT]() {
					goto l0
				}
				add(ruleroot, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 EOT <- <!.> */
		func() bool {
			position2, tokenIndex2 := position, tokenIndex
			{
				position3 := position
				{
					position4, tokenIndex4 := position, tokenIndex
					if !matchDot() {
						goto l4
					}
					goto l2
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
				add(ruleEOT, position3)
			}
			return true
		l2:
			position, tokenIndex = position2, tokenIndex2
			return false
		},
		/* 2 expression <- <(assign / additive)> */
		func() bool {
			position5, tokenIndex5 := position, tokenIndex
			{
				position6 := position
				{
					position7, tokenIndex7 := position, tokenIndex
					if !_rules[ruleassign]() {
						goto l8
					}
					goto l7
				l8:
					position, tokenIndex = position7, tokenIndex7
					if !_rules[ruleadditive]() {
						goto l5
					}
				}
			l7:
				add(ruleexpression, position6)
			}
			return true
		l5:
			position, tokenIndex = position5, tokenIndex5
			return false
		},
		/* 3 assign <- <(identifier _ '=' _ expression Action0)> */
		func() bool {
			position9, tokenIndex9 := position, tokenIndex
			{
				position10 := position
				if !_rules[ruleidentifier]() {
					goto l9
				}
				if !_rules[rule_]() {
					goto l9
				}
				if buffer[position] != rune('=') {
					goto l9
				}
				position++
				if !_rules[rule_]() {
					goto l9
				}
				if !_rules[ruleexpression]() {
					goto l9
				}
				if !_rules[ruleAction0]() {
					goto l9
				}
				add(ruleassign, position10)
			}
			return true
		l9:
			position, tokenIndex = position9, tokenIndex9
			return false
		},
		/* 4 additive <- <(multitive ((_ '+' _ multitive Action1) / (_ '-' _ multitive Action2))*)> */
		func() bool {
			position11, tokenIndex11 := position, tokenIndex
			{
				position12 := position
				if !_rules[rulemultitive]() {
					goto l11
				}
			l13:
				{
					position14, tokenIndex14 := position, tokenIndex
					{
						position15, tokenIndex15 := position, tokenIndex
						if !_rules[rule_]() {
							goto l16
						}
						if buffer[position] != rune('+') {
							goto l16
						}
						position++
						if !_rules[rule_]() {
							goto l16
						}
						if !_rules[rulemultitive]() {
							goto l16
						}
						if !_rules[ruleAction1]() {
							goto l16
						}
						goto l15
					l16:
						position, tokenIndex = position15, tokenIndex15
						if !_rules[rule_]() {
							goto l14
						}
						if buffer[position] != rune('-') {
							goto l14
						}
						position++
						if !_rules[rule_]() {
							goto l14
						}
						if !_rules[rulemultitive]() {
							goto l14
						}
						if !_rules[ruleAction2]() {
							goto l14
						}
					}
				l15:
					goto l13
				l14:
					position, tokenIndex = position14, tokenIndex14
				}
				add(ruleadditive, position12)
			}
			return true
		l11:
			position, tokenIndex = position11, tokenIndex11
			return false
		},
		/* 5 multitive <- <(primary ((_ '*' _ primary Action3) / (_ '/' _ primary Action4) / (_ '%' _ primary Action5))*)> */
		func() bool {
			position17, tokenIndex17 := position, tokenIndex
			{
				position18 := position
				if !_rules[ruleprimary]() {
					goto l17
				}
			l19:
				{
					position20, tokenIndex20 := position, tokenIndex
					{
						position21, tokenIndex21 := position, tokenIndex
						if !_rules[rule_]() {
							goto l22
						}
						if buffer[position] != rune('*') {
							goto l22
						}
						position++
						if !_rules[rule_]() {
							goto l22
						}
						if !_rules[ruleprimary]() {
							goto l22
						}
						if !_rules[ruleAction3]() {
							goto l22
						}
						goto l21
					l22:
						position, tokenIndex = position21, tokenIndex21
						if !_rules[rule_]() {
							goto l23
						}
						if buffer[position] != rune('/') {
							goto l23
						}
						position++
						if !_rules[rule_]() {
							goto l23
						}
						if !_rules[ruleprimary]() {
							goto l23
						}
						if !_rules[ruleAction4]() {
							goto l23
						}
						goto l21
					l23:
						position, tokenIndex = position21, tokenIndex21
						if !_rules[rule_]() {
							goto l20
						}
						if buffer[position] != rune('%') {
							goto l20
						}
						position++
						if !_rules[rule_]() {
							goto l20
						}
						if !_rules[ruleprimary]() {
							goto l20
						}
						if !_rules[ruleAction5]() {
							goto l20
						}
					}
				l21:
					goto l19
				l20:
					position, tokenIndex = position20, tokenIndex20
				}
				add(rulemultitive, position18)
			}
			return true
		l17:
			position, tokenIndex = position17, tokenIndex17
			return false
		},
		/* 6 primary <- <(<[0-9]+> Action6)> */
		func() bool {
			position24, tokenIndex24 := position, tokenIndex
			{
				position25 := position
				{
					position26 := position
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l24
					}
					position++
				l27:
					{
						position28, tokenIndex28 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l28
						}
						position++
						goto l27
					l28:
						position, tokenIndex = position28, tokenIndex28
					}
					add(rulePegText, position26)
				}
				if !_rules[ruleAction6]() {
					goto l24
				}
				add(ruleprimary, position25)
			}
			return true
		l24:
			position, tokenIndex = position24, tokenIndex24
			return false
		},
		/* 7 identifier <- <(<(('_' / [a-z] / [A-Z]) ('_' / [a-z] / [A-Z] / [0-9])*)> Action7)> */
		func() bool {
			position29, tokenIndex29 := position, tokenIndex
			{
				position30 := position
				{
					position31 := position
					{
						position32, tokenIndex32 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l33
						}
						position++
						goto l32
					l33:
						position, tokenIndex = position32, tokenIndex32
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l34
						}
						position++
						goto l32
					l34:
						position, tokenIndex = position32, tokenIndex32
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l29
						}
						position++
					}
				l32:
				l35:
					{
						position36, tokenIndex36 := position, tokenIndex
						{
							position37, tokenIndex37 := position, tokenIndex
							if buffer[position] != rune('_') {
								goto l38
							}
							position++
							goto l37
						l38:
							position, tokenIndex = position37, tokenIndex37
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l39
							}
							position++
							goto l37
						l39:
							position, tokenIndex = position37, tokenIndex37
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l40
							}
							position++
							goto l37
						l40:
							position, tokenIndex = position37, tokenIndex37
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l36
							}
							position++
						}
					l37:
						goto l35
					l36:
						position, tokenIndex = position36, tokenIndex36
					}
					add(rulePegText, position31)
				}
				if !_rules[ruleAction7]() {
					goto l29
				}
				add(ruleidentifier, position30)
			}
			return true
		l29:
			position, tokenIndex = position29, tokenIndex29
			return false
		},
		/* 8 _ <- <(' ' / '\t' / '\r' / '\n')*> */
		func() bool {
			{
				position42 := position
			l43:
				{
					position44, tokenIndex44 := position, tokenIndex
					{
						position45, tokenIndex45 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l46
						}
						position++
						goto l45
					l46:
						position, tokenIndex = position45, tokenIndex45
						if buffer[position] != rune('\t') {
							goto l47
						}
						position++
						goto l45
					l47:
						position, tokenIndex = position45, tokenIndex45
						if buffer[position] != rune('\r') {
							goto l48
						}
						position++
						goto l45
					l48:
						position, tokenIndex = position45, tokenIndex45
						if buffer[position] != rune('\n') {
							goto l44
						}
						position++
					}
				l45:
					goto l43
				l44:
					position, tokenIndex = position44, tokenIndex44
				}
				add(rule_, position42)
			}
			return true
		},
		/* 10 Action0 <- <{ p.PushAssign() }> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		/* 11 Action1 <- <{ p.PushBinOp("+") }> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 12 Action2 <- <{ p.PushBinOp("-") }> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 13 Action3 <- <{ p.PushBinOp("*") }> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 14 Action4 <- <{ p.PushBinOp("/") }> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 15 Action5 <- <{ p.PushBinOp("%") }> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		nil,
		/* 17 Action6 <- <{ p.PushIntLiteral(begin, end, text) }> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 18 Action7 <- <{ p.PushIdentifier(begin, end, text) }> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
