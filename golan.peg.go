package golan

// Code generated by peg golan.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleroot
	ruleEOT
	rulestatements
	rulestatement
	ruleblock
	rulewhile
	ruleif
	ruleexpression
	ruleassign
	ruleequality
	rulecompare
	ruleadditive
	rulemultitive
	rulefactor
	ruleunary
	rulepostfix
	rulefuncall
	ruleprimary
	ruleidentifier
	rule_
	rulenl
	rulecomment
	rulesp
	ruleAction0
	rulePegText
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
)

var rul3s = [...]string{
	"Unknown",
	"root",
	"EOT",
	"statements",
	"statement",
	"block",
	"while",
	"if",
	"expression",
	"assign",
	"equality",
	"compare",
	"additive",
	"multitive",
	"factor",
	"unary",
	"postfix",
	"funcall",
	"primary",
	"identifier",
	"_",
	"nl",
	"comment",
	"sp",
	"Action0",
	"PegText",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	ASTBuilder

	Buffer string
	buffer []rune
	rules  [59]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *Parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.PushExpressionStatement()
		case ruleAction1:
			p.PushBlock(begin)
		case ruleAction2:
			p.CompleteBlock(end)
		case ruleAction3:
			p.PushWhile(begin)
		case ruleAction4:
			p.CompleteWhile()
		case ruleAction5:
			p.PushIfPart(begin)
		case ruleAction6:
			p.CompleteIfPart()
		case ruleAction7:
			p.PushElsifPart(begin)
		case ruleAction8:
			p.CompleteElsifPart()
		case ruleAction9:
			p.PushElsePart(begin)
		case ruleAction10:
			p.CompleteElsePart()
		case ruleAction11:
			p.CompleteIf()
		case ruleAction12:
			p.PushAssign()
		case ruleAction13:
			p.PushBinOp("==")
		case ruleAction14:
			p.PushBinOp("!=")
		case ruleAction15:
			p.PushBinOp("<=")
		case ruleAction16:
			p.PushBinOp(">=")
		case ruleAction17:
			p.PushBinOp("<")
		case ruleAction18:
			p.PushBinOp(">")
		case ruleAction19:
			p.PushBinOp("+")
		case ruleAction20:
			p.PushBinOp("-")
		case ruleAction21:
			p.PushBinOp("*")
		case ruleAction22:
			p.PushBinOp("/")
		case ruleAction23:
			p.PushBinOp("%")
		case ruleAction24:
			p.PushUnaryOp(begin, end, "-")
		case ruleAction25:
			p.PushUnaryOp(begin, end, "+")
		case ruleAction26:
			p.PushUnaryOp(begin, end, "!")
		case ruleAction27:
			p.CompleteUnary()
		case ruleAction28:
			p.PushApply()
		case ruleAction29:
			p.CompleteApply(end)
		case ruleAction30:
			p.PushApply()
		case ruleAction31:
			p.CompleteApply(end)
		case ruleAction32:
			p.PushIntLiteral(begin, end, text)
		case ruleAction33:
			p.PushIdentifier(begin, end, text)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 root <- <(statements EOT)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulestatements]() {
					goto l0
				}
				if !_rules[ruleEOT]() {
					goto l0
				}
				add(ruleroot, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 EOT <- <!.> */
		func() bool {
			position2, tokenIndex2 := position, tokenIndex
			{
				position3 := position
				{
					position4, tokenIndex4 := position, tokenIndex
					if !matchDot() {
						goto l4
					}
					goto l2
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
				add(ruleEOT, position3)
			}
			return true
		l2:
			position, tokenIndex = position2, tokenIndex2
			return false
		},
		/* 2 statements <- <((sp statement)* sp)> */
		func() bool {
			position5, tokenIndex5 := position, tokenIndex
			{
				position6 := position
			l7:
				{
					position8, tokenIndex8 := position, tokenIndex
					if !_rules[rulesp]() {
						goto l8
					}
					if !_rules[rulestatement]() {
						goto l8
					}
					goto l7
				l8:
					position, tokenIndex = position8, tokenIndex8
				}
				if !_rules[rulesp]() {
					goto l5
				}
				add(rulestatements, position6)
			}
			return true
		l5:
			position, tokenIndex = position5, tokenIndex5
			return false
		},
		/* 3 statement <- <((expression _ comment? nl Action0) / while / if)> */
		func() bool {
			position9, tokenIndex9 := position, tokenIndex
			{
				position10 := position
				{
					position11, tokenIndex11 := position, tokenIndex
					if !_rules[ruleexpression]() {
						goto l12
					}
					if !_rules[rule_]() {
						goto l12
					}
					{
						position13, tokenIndex13 := position, tokenIndex
						if !_rules[rulecomment]() {
							goto l13
						}
						goto l14
					l13:
						position, tokenIndex = position13, tokenIndex13
					}
				l14:
					if !_rules[rulenl]() {
						goto l12
					}
					if !_rules[ruleAction0]() {
						goto l12
					}
					goto l11
				l12:
					position, tokenIndex = position11, tokenIndex11
					if !_rules[rulewhile]() {
						goto l15
					}
					goto l11
				l15:
					position, tokenIndex = position11, tokenIndex11
					if !_rules[ruleif]() {
						goto l9
					}
				}
			l11:
				add(rulestatement, position10)
			}
			return true
		l9:
			position, tokenIndex = position9, tokenIndex9
			return false
		},
		/* 4 block <- <(<'{'> Action1 statements <'}'> Action2)> */
		func() bool {
			position16, tokenIndex16 := position, tokenIndex
			{
				position17 := position
				{
					position18 := position
					if buffer[position] != rune('{') {
						goto l16
					}
					position++
					add(rulePegText, position18)
				}
				if !_rules[ruleAction1]() {
					goto l16
				}
				if !_rules[rulestatements]() {
					goto l16
				}
				{
					position19 := position
					if buffer[position] != rune('}') {
						goto l16
					}
					position++
					add(rulePegText, position19)
				}
				if !_rules[ruleAction2]() {
					goto l16
				}
				add(ruleblock, position17)
			}
			return true
		l16:
			position, tokenIndex = position16, tokenIndex16
			return false
		},
		/* 5 while <- <(<('w' 'h' 'i' 'l' 'e')> Action3 _ expression _ block Action4)> */
		func() bool {
			position20, tokenIndex20 := position, tokenIndex
			{
				position21 := position
				{
					position22 := position
					if buffer[position] != rune('w') {
						goto l20
					}
					position++
					if buffer[position] != rune('h') {
						goto l20
					}
					position++
					if buffer[position] != rune('i') {
						goto l20
					}
					position++
					if buffer[position] != rune('l') {
						goto l20
					}
					position++
					if buffer[position] != rune('e') {
						goto l20
					}
					position++
					add(rulePegText, position22)
				}
				if !_rules[ruleAction3]() {
					goto l20
				}
				if !_rules[rule_]() {
					goto l20
				}
				if !_rules[ruleexpression]() {
					goto l20
				}
				if !_rules[rule_]() {
					goto l20
				}
				if !_rules[ruleblock]() {
					goto l20
				}
				if !_rules[ruleAction4]() {
					goto l20
				}
				add(rulewhile, position21)
			}
			return true
		l20:
			position, tokenIndex = position20, tokenIndex20
			return false
		},
		/* 6 if <- <(<('i' 'f')> Action5 _ expression _ sp _ block Action6 (sp _ <('e' 'l' 's' 'i' 'f')> Action7 _ expression _ sp _ block Action8)* (sp _ <('e' 'l' 's' 'e')> Action9 _ sp _ block Action10)? Action11)> */
		func() bool {
			position23, tokenIndex23 := position, tokenIndex
			{
				position24 := position
				{
					position25 := position
					if buffer[position] != rune('i') {
						goto l23
					}
					position++
					if buffer[position] != rune('f') {
						goto l23
					}
					position++
					add(rulePegText, position25)
				}
				if !_rules[ruleAction5]() {
					goto l23
				}
				if !_rules[rule_]() {
					goto l23
				}
				if !_rules[ruleexpression]() {
					goto l23
				}
				if !_rules[rule_]() {
					goto l23
				}
				if !_rules[rulesp]() {
					goto l23
				}
				if !_rules[rule_]() {
					goto l23
				}
				if !_rules[ruleblock]() {
					goto l23
				}
				if !_rules[ruleAction6]() {
					goto l23
				}
			l26:
				{
					position27, tokenIndex27 := position, tokenIndex
					if !_rules[rulesp]() {
						goto l27
					}
					if !_rules[rule_]() {
						goto l27
					}
					{
						position28 := position
						if buffer[position] != rune('e') {
							goto l27
						}
						position++
						if buffer[position] != rune('l') {
							goto l27
						}
						position++
						if buffer[position] != rune('s') {
							goto l27
						}
						position++
						if buffer[position] != rune('i') {
							goto l27
						}
						position++
						if buffer[position] != rune('f') {
							goto l27
						}
						position++
						add(rulePegText, position28)
					}
					if !_rules[ruleAction7]() {
						goto l27
					}
					if !_rules[rule_]() {
						goto l27
					}
					if !_rules[ruleexpression]() {
						goto l27
					}
					if !_rules[rule_]() {
						goto l27
					}
					if !_rules[rulesp]() {
						goto l27
					}
					if !_rules[rule_]() {
						goto l27
					}
					if !_rules[ruleblock]() {
						goto l27
					}
					if !_rules[ruleAction8]() {
						goto l27
					}
					goto l26
				l27:
					position, tokenIndex = position27, tokenIndex27
				}
				{
					position29, tokenIndex29 := position, tokenIndex
					if !_rules[rulesp]() {
						goto l29
					}
					if !_rules[rule_]() {
						goto l29
					}
					{
						position31 := position
						if buffer[position] != rune('e') {
							goto l29
						}
						position++
						if buffer[position] != rune('l') {
							goto l29
						}
						position++
						if buffer[position] != rune('s') {
							goto l29
						}
						position++
						if buffer[position] != rune('e') {
							goto l29
						}
						position++
						add(rulePegText, position31)
					}
					if !_rules[ruleAction9]() {
						goto l29
					}
					if !_rules[rule_]() {
						goto l29
					}
					if !_rules[rulesp]() {
						goto l29
					}
					if !_rules[rule_]() {
						goto l29
					}
					if !_rules[ruleblock]() {
						goto l29
					}
					if !_rules[ruleAction10]() {
						goto l29
					}
					goto l30
				l29:
					position, tokenIndex = position29, tokenIndex29
				}
			l30:
				if !_rules[ruleAction11]() {
					goto l23
				}
				add(ruleif, position24)
			}
			return true
		l23:
			position, tokenIndex = position23, tokenIndex23
			return false
		},
		/* 7 expression <- <(assign / equality)> */
		func() bool {
			position32, tokenIndex32 := position, tokenIndex
			{
				position33 := position
				{
					position34, tokenIndex34 := position, tokenIndex
					if !_rules[ruleassign]() {
						goto l35
					}
					goto l34
				l35:
					position, tokenIndex = position34, tokenIndex34
					if !_rules[ruleequality]() {
						goto l32
					}
				}
			l34:
				add(ruleexpression, position33)
			}
			return true
		l32:
			position, tokenIndex = position32, tokenIndex32
			return false
		},
		/* 8 assign <- <(identifier _ '=' _ expression Action12)> */
		func() bool {
			position36, tokenIndex36 := position, tokenIndex
			{
				position37 := position
				if !_rules[ruleidentifier]() {
					goto l36
				}
				if !_rules[rule_]() {
					goto l36
				}
				if buffer[position] != rune('=') {
					goto l36
				}
				position++
				if !_rules[rule_]() {
					goto l36
				}
				if !_rules[ruleexpression]() {
					goto l36
				}
				if !_rules[ruleAction12]() {
					goto l36
				}
				add(ruleassign, position37)
			}
			return true
		l36:
			position, tokenIndex = position36, tokenIndex36
			return false
		},
		/* 9 equality <- <(compare ((_ ('=' '=') _ compare Action13) / (_ ('!' '=') _ compare Action14))*)> */
		func() bool {
			position38, tokenIndex38 := position, tokenIndex
			{
				position39 := position
				if !_rules[rulecompare]() {
					goto l38
				}
			l40:
				{
					position41, tokenIndex41 := position, tokenIndex
					{
						position42, tokenIndex42 := position, tokenIndex
						if !_rules[rule_]() {
							goto l43
						}
						if buffer[position] != rune('=') {
							goto l43
						}
						position++
						if buffer[position] != rune('=') {
							goto l43
						}
						position++
						if !_rules[rule_]() {
							goto l43
						}
						if !_rules[rulecompare]() {
							goto l43
						}
						if !_rules[ruleAction13]() {
							goto l43
						}
						goto l42
					l43:
						position, tokenIndex = position42, tokenIndex42
						if !_rules[rule_]() {
							goto l41
						}
						if buffer[position] != rune('!') {
							goto l41
						}
						position++
						if buffer[position] != rune('=') {
							goto l41
						}
						position++
						if !_rules[rule_]() {
							goto l41
						}
						if !_rules[rulecompare]() {
							goto l41
						}
						if !_rules[ruleAction14]() {
							goto l41
						}
					}
				l42:
					goto l40
				l41:
					position, tokenIndex = position41, tokenIndex41
				}
				add(ruleequality, position39)
			}
			return true
		l38:
			position, tokenIndex = position38, tokenIndex38
			return false
		},
		/* 10 compare <- <(additive ((_ ('<' '=') _ additive Action15) / (_ ('>' '=') _ additive Action16) / (_ '<' _ additive Action17) / (_ '>' _ additive Action18))*)> */
		func() bool {
			position44, tokenIndex44 := position, tokenIndex
			{
				position45 := position
				if !_rules[ruleadditive]() {
					goto l44
				}
			l46:
				{
					position47, tokenIndex47 := position, tokenIndex
					{
						position48, tokenIndex48 := position, tokenIndex
						if !_rules[rule_]() {
							goto l49
						}
						if buffer[position] != rune('<') {
							goto l49
						}
						position++
						if buffer[position] != rune('=') {
							goto l49
						}
						position++
						if !_rules[rule_]() {
							goto l49
						}
						if !_rules[ruleadditive]() {
							goto l49
						}
						if !_rules[ruleAction15]() {
							goto l49
						}
						goto l48
					l49:
						position, tokenIndex = position48, tokenIndex48
						if !_rules[rule_]() {
							goto l50
						}
						if buffer[position] != rune('>') {
							goto l50
						}
						position++
						if buffer[position] != rune('=') {
							goto l50
						}
						position++
						if !_rules[rule_]() {
							goto l50
						}
						if !_rules[ruleadditive]() {
							goto l50
						}
						if !_rules[ruleAction16]() {
							goto l50
						}
						goto l48
					l50:
						position, tokenIndex = position48, tokenIndex48
						if !_rules[rule_]() {
							goto l51
						}
						if buffer[position] != rune('<') {
							goto l51
						}
						position++
						if !_rules[rule_]() {
							goto l51
						}
						if !_rules[ruleadditive]() {
							goto l51
						}
						if !_rules[ruleAction17]() {
							goto l51
						}
						goto l48
					l51:
						position, tokenIndex = position48, tokenIndex48
						if !_rules[rule_]() {
							goto l47
						}
						if buffer[position] != rune('>') {
							goto l47
						}
						position++
						if !_rules[rule_]() {
							goto l47
						}
						if !_rules[ruleadditive]() {
							goto l47
						}
						if !_rules[ruleAction18]() {
							goto l47
						}
					}
				l48:
					goto l46
				l47:
					position, tokenIndex = position47, tokenIndex47
				}
				add(rulecompare, position45)
			}
			return true
		l44:
			position, tokenIndex = position44, tokenIndex44
			return false
		},
		/* 11 additive <- <(multitive ((_ '+' _ multitive Action19) / (_ '-' _ multitive Action20))*)> */
		func() bool {
			position52, tokenIndex52 := position, tokenIndex
			{
				position53 := position
				if !_rules[rulemultitive]() {
					goto l52
				}
			l54:
				{
					position55, tokenIndex55 := position, tokenIndex
					{
						position56, tokenIndex56 := position, tokenIndex
						if !_rules[rule_]() {
							goto l57
						}
						if buffer[position] != rune('+') {
							goto l57
						}
						position++
						if !_rules[rule_]() {
							goto l57
						}
						if !_rules[rulemultitive]() {
							goto l57
						}
						if !_rules[ruleAction19]() {
							goto l57
						}
						goto l56
					l57:
						position, tokenIndex = position56, tokenIndex56
						if !_rules[rule_]() {
							goto l55
						}
						if buffer[position] != rune('-') {
							goto l55
						}
						position++
						if !_rules[rule_]() {
							goto l55
						}
						if !_rules[rulemultitive]() {
							goto l55
						}
						if !_rules[ruleAction20]() {
							goto l55
						}
					}
				l56:
					goto l54
				l55:
					position, tokenIndex = position55, tokenIndex55
				}
				add(ruleadditive, position53)
			}
			return true
		l52:
			position, tokenIndex = position52, tokenIndex52
			return false
		},
		/* 12 multitive <- <(factor ((_ '*' _ factor Action21) / (_ '/' _ factor Action22) / (_ '%' _ factor Action23))*)> */
		func() bool {
			position58, tokenIndex58 := position, tokenIndex
			{
				position59 := position
				if !_rules[rulefactor]() {
					goto l58
				}
			l60:
				{
					position61, tokenIndex61 := position, tokenIndex
					{
						position62, tokenIndex62 := position, tokenIndex
						if !_rules[rule_]() {
							goto l63
						}
						if buffer[position] != rune('*') {
							goto l63
						}
						position++
						if !_rules[rule_]() {
							goto l63
						}
						if !_rules[rulefactor]() {
							goto l63
						}
						if !_rules[ruleAction21]() {
							goto l63
						}
						goto l62
					l63:
						position, tokenIndex = position62, tokenIndex62
						if !_rules[rule_]() {
							goto l64
						}
						if buffer[position] != rune('/') {
							goto l64
						}
						position++
						if !_rules[rule_]() {
							goto l64
						}
						if !_rules[rulefactor]() {
							goto l64
						}
						if !_rules[ruleAction22]() {
							goto l64
						}
						goto l62
					l64:
						position, tokenIndex = position62, tokenIndex62
						if !_rules[rule_]() {
							goto l61
						}
						if buffer[position] != rune('%') {
							goto l61
						}
						position++
						if !_rules[rule_]() {
							goto l61
						}
						if !_rules[rulefactor]() {
							goto l61
						}
						if !_rules[ruleAction23]() {
							goto l61
						}
					}
				l62:
					goto l60
				l61:
					position, tokenIndex = position61, tokenIndex61
				}
				add(rulemultitive, position59)
			}
			return true
		l58:
			position, tokenIndex = position58, tokenIndex58
			return false
		},
		/* 13 factor <- <(unary / postfix)> */
		func() bool {
			position65, tokenIndex65 := position, tokenIndex
			{
				position66 := position
				{
					position67, tokenIndex67 := position, tokenIndex
					if !_rules[ruleunary]() {
						goto l68
					}
					goto l67
				l68:
					position, tokenIndex = position67, tokenIndex67
					if !_rules[rulepostfix]() {
						goto l65
					}
				}
			l67:
				add(rulefactor, position66)
			}
			return true
		l65:
			position, tokenIndex = position65, tokenIndex65
			return false
		},
		/* 14 unary <- <(((<'-'> Action24) / (<'+'> Action25) / (<'!'> Action26)) _ factor Action27)> */
		func() bool {
			position69, tokenIndex69 := position, tokenIndex
			{
				position70 := position
				{
					position71, tokenIndex71 := position, tokenIndex
					{
						position73 := position
						if buffer[position] != rune('-') {
							goto l72
						}
						position++
						add(rulePegText, position73)
					}
					if !_rules[ruleAction24]() {
						goto l72
					}
					goto l71
				l72:
					position, tokenIndex = position71, tokenIndex71
					{
						position75 := position
						if buffer[position] != rune('+') {
							goto l74
						}
						position++
						add(rulePegText, position75)
					}
					if !_rules[ruleAction25]() {
						goto l74
					}
					goto l71
				l74:
					position, tokenIndex = position71, tokenIndex71
					{
						position76 := position
						if buffer[position] != rune('!') {
							goto l69
						}
						position++
						add(rulePegText, position76)
					}
					if !_rules[ruleAction26]() {
						goto l69
					}
				}
			l71:
				if !_rules[rule_]() {
					goto l69
				}
				if !_rules[rulefactor]() {
					goto l69
				}
				if !_rules[ruleAction27]() {
					goto l69
				}
				add(ruleunary, position70)
			}
			return true
		l69:
			position, tokenIndex = position69, tokenIndex69
			return false
		},
		/* 15 postfix <- <(primary funcall*)> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				if !_rules[ruleprimary]() {
					goto l77
				}
			l79:
				{
					position80, tokenIndex80 := position, tokenIndex
					if !_rules[rulefuncall]() {
						goto l80
					}
					goto l79
				l80:
					position, tokenIndex = position80, tokenIndex80
				}
				add(rulepostfix, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 16 funcall <- <((_ '(' Action28 sp _ <')'> Action29) / ('(' Action30 sp _ expression (_ ',' sp _ expression)* (_ ',')? sp _ <')'> Action31))> */
		func() bool {
			position81, tokenIndex81 := position, tokenIndex
			{
				position82 := position
				{
					position83, tokenIndex83 := position, tokenIndex
					if !_rules[rule_]() {
						goto l84
					}
					if buffer[position] != rune('(') {
						goto l84
					}
					position++
					if !_rules[ruleAction28]() {
						goto l84
					}
					if !_rules[rulesp]() {
						goto l84
					}
					if !_rules[rule_]() {
						goto l84
					}
					{
						position85 := position
						if buffer[position] != rune(')') {
							goto l84
						}
						position++
						add(rulePegText, position85)
					}
					if !_rules[ruleAction29]() {
						goto l84
					}
					goto l83
				l84:
					position, tokenIndex = position83, tokenIndex83
					if buffer[position] != rune('(') {
						goto l81
					}
					position++
					if !_rules[ruleAction30]() {
						goto l81
					}
					if !_rules[rulesp]() {
						goto l81
					}
					if !_rules[rule_]() {
						goto l81
					}
					if !_rules[ruleexpression]() {
						goto l81
					}
				l86:
					{
						position87, tokenIndex87 := position, tokenIndex
						if !_rules[rule_]() {
							goto l87
						}
						if buffer[position] != rune(',') {
							goto l87
						}
						position++
						if !_rules[rulesp]() {
							goto l87
						}
						if !_rules[rule_]() {
							goto l87
						}
						if !_rules[ruleexpression]() {
							goto l87
						}
						goto l86
					l87:
						position, tokenIndex = position87, tokenIndex87
					}
					{
						position88, tokenIndex88 := position, tokenIndex
						if !_rules[rule_]() {
							goto l88
						}
						if buffer[position] != rune(',') {
							goto l88
						}
						position++
						goto l89
					l88:
						position, tokenIndex = position88, tokenIndex88
					}
				l89:
					if !_rules[rulesp]() {
						goto l81
					}
					if !_rules[rule_]() {
						goto l81
					}
					{
						position90 := position
						if buffer[position] != rune(')') {
							goto l81
						}
						position++
						add(rulePegText, position90)
					}
					if !_rules[ruleAction31]() {
						goto l81
					}
				}
			l83:
				add(rulefuncall, position82)
			}
			return true
		l81:
			position, tokenIndex = position81, tokenIndex81
			return false
		},
		/* 17 primary <- <(('(' _ sp _ expression _ sp _ ')') / (<[0-9]+> Action32) / identifier)> */
		func() bool {
			position91, tokenIndex91 := position, tokenIndex
			{
				position92 := position
				{
					position93, tokenIndex93 := position, tokenIndex
					if buffer[position] != rune('(') {
						goto l94
					}
					position++
					if !_rules[rule_]() {
						goto l94
					}
					if !_rules[rulesp]() {
						goto l94
					}
					if !_rules[rule_]() {
						goto l94
					}
					if !_rules[ruleexpression]() {
						goto l94
					}
					if !_rules[rule_]() {
						goto l94
					}
					if !_rules[rulesp]() {
						goto l94
					}
					if !_rules[rule_]() {
						goto l94
					}
					if buffer[position] != rune(')') {
						goto l94
					}
					position++
					goto l93
				l94:
					position, tokenIndex = position93, tokenIndex93
					{
						position96 := position
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l95
						}
						position++
					l97:
						{
							position98, tokenIndex98 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l98
							}
							position++
							goto l97
						l98:
							position, tokenIndex = position98, tokenIndex98
						}
						add(rulePegText, position96)
					}
					if !_rules[ruleAction32]() {
						goto l95
					}
					goto l93
				l95:
					position, tokenIndex = position93, tokenIndex93
					if !_rules[ruleidentifier]() {
						goto l91
					}
				}
			l93:
				add(ruleprimary, position92)
			}
			return true
		l91:
			position, tokenIndex = position91, tokenIndex91
			return false
		},
		/* 18 identifier <- <(<(('_' / [a-z] / [A-Z]) ('_' / [a-z] / [A-Z] / [0-9])*)> Action33)> */
		func() bool {
			position99, tokenIndex99 := position, tokenIndex
			{
				position100 := position
				{
					position101 := position
					{
						position102, tokenIndex102 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l103
						}
						position++
						goto l102
					l103:
						position, tokenIndex = position102, tokenIndex102
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l104
						}
						position++
						goto l102
					l104:
						position, tokenIndex = position102, tokenIndex102
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l99
						}
						position++
					}
				l102:
				l105:
					{
						position106, tokenIndex106 := position, tokenIndex
						{
							position107, tokenIndex107 := position, tokenIndex
							if buffer[position] != rune('_') {
								goto l108
							}
							position++
							goto l107
						l108:
							position, tokenIndex = position107, tokenIndex107
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l109
							}
							position++
							goto l107
						l109:
							position, tokenIndex = position107, tokenIndex107
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l110
							}
							position++
							goto l107
						l110:
							position, tokenIndex = position107, tokenIndex107
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l106
							}
							position++
						}
					l107:
						goto l105
					l106:
						position, tokenIndex = position106, tokenIndex106
					}
					add(rulePegText, position101)
				}
				if !_rules[ruleAction33]() {
					goto l99
				}
				add(ruleidentifier, position100)
			}
			return true
		l99:
			position, tokenIndex = position99, tokenIndex99
			return false
		},
		/* 19 _ <- <(' ' / '\t')*> */
		func() bool {
			{
				position112 := position
			l113:
				{
					position114, tokenIndex114 := position, tokenIndex
					{
						position115, tokenIndex115 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l116
						}
						position++
						goto l115
					l116:
						position, tokenIndex = position115, tokenIndex115
						if buffer[position] != rune('\t') {
							goto l114
						}
						position++
					}
				l115:
					goto l113
				l114:
					position, tokenIndex = position114, tokenIndex114
				}
				add(rule_, position112)
			}
			return true
		},
		/* 20 nl <- <('\r' / '\n')+> */
		func() bool {
			position117, tokenIndex117 := position, tokenIndex
			{
				position118 := position
				{
					position121, tokenIndex121 := position, tokenIndex
					if buffer[position] != rune('\r') {
						goto l122
					}
					position++
					goto l121
				l122:
					position, tokenIndex = position121, tokenIndex121
					if buffer[position] != rune('\n') {
						goto l117
					}
					position++
				}
			l121:
			l119:
				{
					position120, tokenIndex120 := position, tokenIndex
					{
						position123, tokenIndex123 := position, tokenIndex
						if buffer[position] != rune('\r') {
							goto l124
						}
						position++
						goto l123
					l124:
						position, tokenIndex = position123, tokenIndex123
						if buffer[position] != rune('\n') {
							goto l120
						}
						position++
					}
				l123:
					goto l119
				l120:
					position, tokenIndex = position120, tokenIndex120
				}
				add(rulenl, position118)
			}
			return true
		l117:
			position, tokenIndex = position117, tokenIndex117
			return false
		},
		/* 21 comment <- <('#' (!('\r' / '\n') .)*)> */
		func() bool {
			position125, tokenIndex125 := position, tokenIndex
			{
				position126 := position
				if buffer[position] != rune('#') {
					goto l125
				}
				position++
			l127:
				{
					position128, tokenIndex128 := position, tokenIndex
					{
						position129, tokenIndex129 := position, tokenIndex
						{
							position130, tokenIndex130 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l131
							}
							position++
							goto l130
						l131:
							position, tokenIndex = position130, tokenIndex130
							if buffer[position] != rune('\n') {
								goto l129
							}
							position++
						}
					l130:
						goto l128
					l129:
						position, tokenIndex = position129, tokenIndex129
					}
					if !matchDot() {
						goto l128
					}
					goto l127
				l128:
					position, tokenIndex = position128, tokenIndex128
				}
				add(rulecomment, position126)
			}
			return true
		l125:
			position, tokenIndex = position125, tokenIndex125
			return false
		},
		/* 22 sp <- <(_ comment? nl _)*> */
		func() bool {
			{
				position133 := position
			l134:
				{
					position135, tokenIndex135 := position, tokenIndex
					if !_rules[rule_]() {
						goto l135
					}
					{
						position136, tokenIndex136 := position, tokenIndex
						if !_rules[rulecomment]() {
							goto l136
						}
						goto l137
					l136:
						position, tokenIndex = position136, tokenIndex136
					}
				l137:
					if !_rules[rulenl]() {
						goto l135
					}
					if !_rules[rule_]() {
						goto l135
					}
					goto l134
				l135:
					position, tokenIndex = position135, tokenIndex135
				}
				add(rulesp, position133)
			}
			return true
		},
		/* 24 Action0 <- <{ p.PushExpressionStatement() }> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		nil,
		/* 26 Action1 <- <{ p.PushBlock(begin) }> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 27 Action2 <- <{ p.CompleteBlock(end) }> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 28 Action3 <- <{ p.PushWhile(begin) }> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 29 Action4 <- <{ p.CompleteWhile() }> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 30 Action5 <- <{ p.PushIfPart(begin) }> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 31 Action6 <- <{ p.CompleteIfPart() }> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 32 Action7 <- <{ p.PushElsifPart(begin) }> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 33 Action8 <- <{ p.CompleteElsifPart() }> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		/* 34 Action9 <- <{ p.PushElsePart(begin) }> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
		/* 35 Action10 <- <{ p.CompleteElsePart() }> */
		func() bool {
			{
				add(ruleAction10, position)
			}
			return true
		},
		/* 36 Action11 <- <{ p.CompleteIf() }> */
		func() bool {
			{
				add(ruleAction11, position)
			}
			return true
		},
		/* 37 Action12 <- <{ p.PushAssign() }> */
		func() bool {
			{
				add(ruleAction12, position)
			}
			return true
		},
		/* 38 Action13 <- <{ p.PushBinOp("==") }> */
		func() bool {
			{
				add(ruleAction13, position)
			}
			return true
		},
		/* 39 Action14 <- <{ p.PushBinOp("!=") }> */
		func() bool {
			{
				add(ruleAction14, position)
			}
			return true
		},
		/* 40 Action15 <- <{ p.PushBinOp("<=") }> */
		func() bool {
			{
				add(ruleAction15, position)
			}
			return true
		},
		/* 41 Action16 <- <{ p.PushBinOp(">=") }> */
		func() bool {
			{
				add(ruleAction16, position)
			}
			return true
		},
		/* 42 Action17 <- <{ p.PushBinOp("<") }> */
		func() bool {
			{
				add(ruleAction17, position)
			}
			return true
		},
		/* 43 Action18 <- <{ p.PushBinOp(">") }> */
		func() bool {
			{
				add(ruleAction18, position)
			}
			return true
		},
		/* 44 Action19 <- <{ p.PushBinOp("+") }> */
		func() bool {
			{
				add(ruleAction19, position)
			}
			return true
		},
		/* 45 Action20 <- <{ p.PushBinOp("-") }> */
		func() bool {
			{
				add(ruleAction20, position)
			}
			return true
		},
		/* 46 Action21 <- <{ p.PushBinOp("*") }> */
		func() bool {
			{
				add(ruleAction21, position)
			}
			return true
		},
		/* 47 Action22 <- <{ p.PushBinOp("/") }> */
		func() bool {
			{
				add(ruleAction22, position)
			}
			return true
		},
		/* 48 Action23 <- <{ p.PushBinOp("%") }> */
		func() bool {
			{
				add(ruleAction23, position)
			}
			return true
		},
		/* 49 Action24 <- <{ p.PushUnaryOp(begin, end, "-") }> */
		func() bool {
			{
				add(ruleAction24, position)
			}
			return true
		},
		/* 50 Action25 <- <{ p.PushUnaryOp(begin, end, "+") }> */
		func() bool {
			{
				add(ruleAction25, position)
			}
			return true
		},
		/* 51 Action26 <- <{ p.PushUnaryOp(begin, end, "!") }> */
		func() bool {
			{
				add(ruleAction26, position)
			}
			return true
		},
		/* 52 Action27 <- <{ p.CompleteUnary() }> */
		func() bool {
			{
				add(ruleAction27, position)
			}
			return true
		},
		/* 53 Action28 <- <{ p.PushApply() }> */
		func() bool {
			{
				add(ruleAction28, position)
			}
			return true
		},
		/* 54 Action29 <- <{ p.CompleteApply(end) }> */
		func() bool {
			{
				add(ruleAction29, position)
			}
			return true
		},
		/* 55 Action30 <- <{ p.PushApply() }> */
		func() bool {
			{
				add(ruleAction30, position)
			}
			return true
		},
		/* 56 Action31 <- <{ p.CompleteApply(end) }> */
		func() bool {
			{
				add(ruleAction31, position)
			}
			return true
		},
		/* 57 Action32 <- <{ p.PushIntLiteral(begin, end, text) }> */
		func() bool {
			{
				add(ruleAction32, position)
			}
			return true
		},
		/* 58 Action33 <- <{ p.PushIdentifier(begin, end, text) }> */
		func() bool {
			{
				add(ruleAction33, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
