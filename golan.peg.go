package golan

// Code generated by peg golan.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleroot
	ruleEOT
	rulestatements
	rulestatement
	ruleblock
	rulewhile
	ruleif
	ruleexpression
	ruleassign
	ruleequality
	rulecompare
	ruleadditive
	rulemultitive
	rulefactor
	ruleunary
	rulepostfix
	rulefuncall
	ruleprimary
	rulefloat
	ruleinteger
	rulestring
	ruleidentifier
	rule_
	rulenl
	rulecomment
	rulesp
	ruleAction0
	ruleAction1
	rulePegText
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
	ruleAction40
	ruleAction41
	ruleAction42
	ruleAction43
)

var rul3s = [...]string{
	"Unknown",
	"root",
	"EOT",
	"statements",
	"statement",
	"block",
	"while",
	"if",
	"expression",
	"assign",
	"equality",
	"compare",
	"additive",
	"multitive",
	"factor",
	"unary",
	"postfix",
	"funcall",
	"primary",
	"float",
	"integer",
	"string",
	"identifier",
	"_",
	"nl",
	"comment",
	"sp",
	"Action0",
	"Action1",
	"PegText",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
	"Action40",
	"Action41",
	"Action42",
	"Action43",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	ASTBuilder

	Buffer string
	buffer []rune
	rules  [72]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *Parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.PushExpressionStatement()
		case ruleAction1:
			p.PopBlock()
		case ruleAction2:
			p.PushBlock(begin)
		case ruleAction3:
			p.CompleteBlock(end)
		case ruleAction4:
			p.PushWhile(begin)
		case ruleAction5:
			p.CompleteWhile()
		case ruleAction6:
			p.PushIfPart(begin)
		case ruleAction7:
			p.CompleteIfPart()
		case ruleAction8:
			p.PushElsifPart(begin)
		case ruleAction9:
			p.CompleteElsifPart()
		case ruleAction10:
			p.PushElsePart(begin)
		case ruleAction11:
			p.CompleteElsePart()
		case ruleAction12:
			p.CompleteIf()
		case ruleAction13:
			p.PushAssign("")
		case ruleAction14:
			p.PushAssign("+")
		case ruleAction15:
			p.PushAssign("-")
		case ruleAction16:
			p.PushAssign("*")
		case ruleAction17:
			p.PushAssign("/")
		case ruleAction18:
			p.PushAssign("%")
		case ruleAction19:
			p.PushBinOp("==")
		case ruleAction20:
			p.PushBinOp("!=")
		case ruleAction21:
			p.PushBinOp("<=")
		case ruleAction22:
			p.PushBinOp(">=")
		case ruleAction23:
			p.PushBinOp("<")
		case ruleAction24:
			p.PushBinOp(">")
		case ruleAction25:
			p.PushBinOp("+")
		case ruleAction26:
			p.PushBinOp("-")
		case ruleAction27:
			p.PushBinOp("*")
		case ruleAction28:
			p.PushBinOp("/")
		case ruleAction29:
			p.PushBinOp("%")
		case ruleAction30:
			p.PushUnaryOp(begin, end, "-")
		case ruleAction31:
			p.PushUnaryOp(begin, end, "+")
		case ruleAction32:
			p.PushUnaryOp(begin, end, "!")
		case ruleAction33:
			p.CompleteUnary()
		case ruleAction34:
			p.PushApply()
		case ruleAction35:
			p.CompleteApply(end)
		case ruleAction36:
			p.PushApply()
		case ruleAction37:
			p.CompleteApply(end)
		case ruleAction38:
			p.PushBooleanLiteral(begin, end, true)
		case ruleAction39:
			p.PushBooleanLiteral(begin, end, false)
		case ruleAction40:
			p.PushFloatLiteral(begin, end, text)
		case ruleAction41:
			p.PushIntLiteral(begin, end, text)
		case ruleAction42:
			p.PushStringLiteral(begin, end, text)
		case ruleAction43:
			p.PushIdentifier(begin, end, text)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 root <- <(statements EOT)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulestatements]() {
					goto l0
				}
				if !_rules[ruleEOT]() {
					goto l0
				}
				add(ruleroot, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 EOT <- <!.> */
		func() bool {
			position2, tokenIndex2 := position, tokenIndex
			{
				position3 := position
				{
					position4, tokenIndex4 := position, tokenIndex
					if !matchDot() {
						goto l4
					}
					goto l2
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
				add(ruleEOT, position3)
			}
			return true
		l2:
			position, tokenIndex = position2, tokenIndex2
			return false
		},
		/* 2 statements <- <((_ sp _ statement)* _ sp _)> */
		func() bool {
			position5, tokenIndex5 := position, tokenIndex
			{
				position6 := position
			l7:
				{
					position8, tokenIndex8 := position, tokenIndex
					if !_rules[rule_]() {
						goto l8
					}
					if !_rules[rulesp]() {
						goto l8
					}
					if !_rules[rule_]() {
						goto l8
					}
					if !_rules[rulestatement]() {
						goto l8
					}
					goto l7
				l8:
					position, tokenIndex = position8, tokenIndex8
				}
				if !_rules[rule_]() {
					goto l5
				}
				if !_rules[rulesp]() {
					goto l5
				}
				if !_rules[rule_]() {
					goto l5
				}
				add(rulestatements, position6)
			}
			return true
		l5:
			position, tokenIndex = position5, tokenIndex5
			return false
		},
		/* 3 statement <- <((expression _ comment? nl Action0) / (block Action1) / while / if)> */
		func() bool {
			position9, tokenIndex9 := position, tokenIndex
			{
				position10 := position
				{
					position11, tokenIndex11 := position, tokenIndex
					if !_rules[ruleexpression]() {
						goto l12
					}
					if !_rules[rule_]() {
						goto l12
					}
					{
						position13, tokenIndex13 := position, tokenIndex
						if !_rules[rulecomment]() {
							goto l13
						}
						goto l14
					l13:
						position, tokenIndex = position13, tokenIndex13
					}
				l14:
					if !_rules[rulenl]() {
						goto l12
					}
					if !_rules[ruleAction0]() {
						goto l12
					}
					goto l11
				l12:
					position, tokenIndex = position11, tokenIndex11
					if !_rules[ruleblock]() {
						goto l15
					}
					if !_rules[ruleAction1]() {
						goto l15
					}
					goto l11
				l15:
					position, tokenIndex = position11, tokenIndex11
					if !_rules[rulewhile]() {
						goto l16
					}
					goto l11
				l16:
					position, tokenIndex = position11, tokenIndex11
					if !_rules[ruleif]() {
						goto l9
					}
				}
			l11:
				add(rulestatement, position10)
			}
			return true
		l9:
			position, tokenIndex = position9, tokenIndex9
			return false
		},
		/* 4 block <- <(<'{'> Action2 statements <'}'> Action3)> */
		func() bool {
			position17, tokenIndex17 := position, tokenIndex
			{
				position18 := position
				{
					position19 := position
					if buffer[position] != rune('{') {
						goto l17
					}
					position++
					add(rulePegText, position19)
				}
				if !_rules[ruleAction2]() {
					goto l17
				}
				if !_rules[rulestatements]() {
					goto l17
				}
				{
					position20 := position
					if buffer[position] != rune('}') {
						goto l17
					}
					position++
					add(rulePegText, position20)
				}
				if !_rules[ruleAction3]() {
					goto l17
				}
				add(ruleblock, position18)
			}
			return true
		l17:
			position, tokenIndex = position17, tokenIndex17
			return false
		},
		/* 5 while <- <(<('w' 'h' 'i' 'l' 'e')> Action4 _ expression _ block Action5)> */
		func() bool {
			position21, tokenIndex21 := position, tokenIndex
			{
				position22 := position
				{
					position23 := position
					if buffer[position] != rune('w') {
						goto l21
					}
					position++
					if buffer[position] != rune('h') {
						goto l21
					}
					position++
					if buffer[position] != rune('i') {
						goto l21
					}
					position++
					if buffer[position] != rune('l') {
						goto l21
					}
					position++
					if buffer[position] != rune('e') {
						goto l21
					}
					position++
					add(rulePegText, position23)
				}
				if !_rules[ruleAction4]() {
					goto l21
				}
				if !_rules[rule_]() {
					goto l21
				}
				if !_rules[ruleexpression]() {
					goto l21
				}
				if !_rules[rule_]() {
					goto l21
				}
				if !_rules[ruleblock]() {
					goto l21
				}
				if !_rules[ruleAction5]() {
					goto l21
				}
				add(rulewhile, position22)
			}
			return true
		l21:
			position, tokenIndex = position21, tokenIndex21
			return false
		},
		/* 6 if <- <(<('i' 'f')> Action6 _ expression _ sp _ block Action7 (sp _ <('e' 'l' 's' 'i' 'f')> Action8 _ expression _ sp _ block Action9)* (sp _ <('e' 'l' 's' 'e')> Action10 _ sp _ block Action11)? Action12)> */
		func() bool {
			position24, tokenIndex24 := position, tokenIndex
			{
				position25 := position
				{
					position26 := position
					if buffer[position] != rune('i') {
						goto l24
					}
					position++
					if buffer[position] != rune('f') {
						goto l24
					}
					position++
					add(rulePegText, position26)
				}
				if !_rules[ruleAction6]() {
					goto l24
				}
				if !_rules[rule_]() {
					goto l24
				}
				if !_rules[ruleexpression]() {
					goto l24
				}
				if !_rules[rule_]() {
					goto l24
				}
				if !_rules[rulesp]() {
					goto l24
				}
				if !_rules[rule_]() {
					goto l24
				}
				if !_rules[ruleblock]() {
					goto l24
				}
				if !_rules[ruleAction7]() {
					goto l24
				}
			l27:
				{
					position28, tokenIndex28 := position, tokenIndex
					if !_rules[rulesp]() {
						goto l28
					}
					if !_rules[rule_]() {
						goto l28
					}
					{
						position29 := position
						if buffer[position] != rune('e') {
							goto l28
						}
						position++
						if buffer[position] != rune('l') {
							goto l28
						}
						position++
						if buffer[position] != rune('s') {
							goto l28
						}
						position++
						if buffer[position] != rune('i') {
							goto l28
						}
						position++
						if buffer[position] != rune('f') {
							goto l28
						}
						position++
						add(rulePegText, position29)
					}
					if !_rules[ruleAction8]() {
						goto l28
					}
					if !_rules[rule_]() {
						goto l28
					}
					if !_rules[ruleexpression]() {
						goto l28
					}
					if !_rules[rule_]() {
						goto l28
					}
					if !_rules[rulesp]() {
						goto l28
					}
					if !_rules[rule_]() {
						goto l28
					}
					if !_rules[ruleblock]() {
						goto l28
					}
					if !_rules[ruleAction9]() {
						goto l28
					}
					goto l27
				l28:
					position, tokenIndex = position28, tokenIndex28
				}
				{
					position30, tokenIndex30 := position, tokenIndex
					if !_rules[rulesp]() {
						goto l30
					}
					if !_rules[rule_]() {
						goto l30
					}
					{
						position32 := position
						if buffer[position] != rune('e') {
							goto l30
						}
						position++
						if buffer[position] != rune('l') {
							goto l30
						}
						position++
						if buffer[position] != rune('s') {
							goto l30
						}
						position++
						if buffer[position] != rune('e') {
							goto l30
						}
						position++
						add(rulePegText, position32)
					}
					if !_rules[ruleAction10]() {
						goto l30
					}
					if !_rules[rule_]() {
						goto l30
					}
					if !_rules[rulesp]() {
						goto l30
					}
					if !_rules[rule_]() {
						goto l30
					}
					if !_rules[ruleblock]() {
						goto l30
					}
					if !_rules[ruleAction11]() {
						goto l30
					}
					goto l31
				l30:
					position, tokenIndex = position30, tokenIndex30
				}
			l31:
				if !_rules[ruleAction12]() {
					goto l24
				}
				add(ruleif, position25)
			}
			return true
		l24:
			position, tokenIndex = position24, tokenIndex24
			return false
		},
		/* 7 expression <- <(assign / equality)> */
		func() bool {
			position33, tokenIndex33 := position, tokenIndex
			{
				position34 := position
				{
					position35, tokenIndex35 := position, tokenIndex
					if !_rules[ruleassign]() {
						goto l36
					}
					goto l35
				l36:
					position, tokenIndex = position35, tokenIndex35
					if !_rules[ruleequality]() {
						goto l33
					}
				}
			l35:
				add(ruleexpression, position34)
			}
			return true
		l33:
			position, tokenIndex = position33, tokenIndex33
			return false
		},
		/* 8 assign <- <((identifier _ '=' _ expression Action13) / (identifier _ ('+' '=') _ expression Action14) / (identifier _ ('-' '=') _ expression Action15) / (identifier _ ('*' '=') _ expression Action16) / (identifier _ ('/' '=') _ expression Action17) / (identifier _ ('%' '=') _ expression Action18))> */
		func() bool {
			position37, tokenIndex37 := position, tokenIndex
			{
				position38 := position
				{
					position39, tokenIndex39 := position, tokenIndex
					if !_rules[ruleidentifier]() {
						goto l40
					}
					if !_rules[rule_]() {
						goto l40
					}
					if buffer[position] != rune('=') {
						goto l40
					}
					position++
					if !_rules[rule_]() {
						goto l40
					}
					if !_rules[ruleexpression]() {
						goto l40
					}
					if !_rules[ruleAction13]() {
						goto l40
					}
					goto l39
				l40:
					position, tokenIndex = position39, tokenIndex39
					if !_rules[ruleidentifier]() {
						goto l41
					}
					if !_rules[rule_]() {
						goto l41
					}
					if buffer[position] != rune('+') {
						goto l41
					}
					position++
					if buffer[position] != rune('=') {
						goto l41
					}
					position++
					if !_rules[rule_]() {
						goto l41
					}
					if !_rules[ruleexpression]() {
						goto l41
					}
					if !_rules[ruleAction14]() {
						goto l41
					}
					goto l39
				l41:
					position, tokenIndex = position39, tokenIndex39
					if !_rules[ruleidentifier]() {
						goto l42
					}
					if !_rules[rule_]() {
						goto l42
					}
					if buffer[position] != rune('-') {
						goto l42
					}
					position++
					if buffer[position] != rune('=') {
						goto l42
					}
					position++
					if !_rules[rule_]() {
						goto l42
					}
					if !_rules[ruleexpression]() {
						goto l42
					}
					if !_rules[ruleAction15]() {
						goto l42
					}
					goto l39
				l42:
					position, tokenIndex = position39, tokenIndex39
					if !_rules[ruleidentifier]() {
						goto l43
					}
					if !_rules[rule_]() {
						goto l43
					}
					if buffer[position] != rune('*') {
						goto l43
					}
					position++
					if buffer[position] != rune('=') {
						goto l43
					}
					position++
					if !_rules[rule_]() {
						goto l43
					}
					if !_rules[ruleexpression]() {
						goto l43
					}
					if !_rules[ruleAction16]() {
						goto l43
					}
					goto l39
				l43:
					position, tokenIndex = position39, tokenIndex39
					if !_rules[ruleidentifier]() {
						goto l44
					}
					if !_rules[rule_]() {
						goto l44
					}
					if buffer[position] != rune('/') {
						goto l44
					}
					position++
					if buffer[position] != rune('=') {
						goto l44
					}
					position++
					if !_rules[rule_]() {
						goto l44
					}
					if !_rules[ruleexpression]() {
						goto l44
					}
					if !_rules[ruleAction17]() {
						goto l44
					}
					goto l39
				l44:
					position, tokenIndex = position39, tokenIndex39
					if !_rules[ruleidentifier]() {
						goto l37
					}
					if !_rules[rule_]() {
						goto l37
					}
					if buffer[position] != rune('%') {
						goto l37
					}
					position++
					if buffer[position] != rune('=') {
						goto l37
					}
					position++
					if !_rules[rule_]() {
						goto l37
					}
					if !_rules[ruleexpression]() {
						goto l37
					}
					if !_rules[ruleAction18]() {
						goto l37
					}
				}
			l39:
				add(ruleassign, position38)
			}
			return true
		l37:
			position, tokenIndex = position37, tokenIndex37
			return false
		},
		/* 9 equality <- <(compare ((_ ('=' '=') _ compare Action19) / (_ ('!' '=') _ compare Action20))*)> */
		func() bool {
			position45, tokenIndex45 := position, tokenIndex
			{
				position46 := position
				if !_rules[rulecompare]() {
					goto l45
				}
			l47:
				{
					position48, tokenIndex48 := position, tokenIndex
					{
						position49, tokenIndex49 := position, tokenIndex
						if !_rules[rule_]() {
							goto l50
						}
						if buffer[position] != rune('=') {
							goto l50
						}
						position++
						if buffer[position] != rune('=') {
							goto l50
						}
						position++
						if !_rules[rule_]() {
							goto l50
						}
						if !_rules[rulecompare]() {
							goto l50
						}
						if !_rules[ruleAction19]() {
							goto l50
						}
						goto l49
					l50:
						position, tokenIndex = position49, tokenIndex49
						if !_rules[rule_]() {
							goto l48
						}
						if buffer[position] != rune('!') {
							goto l48
						}
						position++
						if buffer[position] != rune('=') {
							goto l48
						}
						position++
						if !_rules[rule_]() {
							goto l48
						}
						if !_rules[rulecompare]() {
							goto l48
						}
						if !_rules[ruleAction20]() {
							goto l48
						}
					}
				l49:
					goto l47
				l48:
					position, tokenIndex = position48, tokenIndex48
				}
				add(ruleequality, position46)
			}
			return true
		l45:
			position, tokenIndex = position45, tokenIndex45
			return false
		},
		/* 10 compare <- <(additive ((_ ('<' '=') _ additive Action21) / (_ ('>' '=') _ additive Action22) / (_ '<' _ additive Action23) / (_ '>' _ additive Action24))*)> */
		func() bool {
			position51, tokenIndex51 := position, tokenIndex
			{
				position52 := position
				if !_rules[ruleadditive]() {
					goto l51
				}
			l53:
				{
					position54, tokenIndex54 := position, tokenIndex
					{
						position55, tokenIndex55 := position, tokenIndex
						if !_rules[rule_]() {
							goto l56
						}
						if buffer[position] != rune('<') {
							goto l56
						}
						position++
						if buffer[position] != rune('=') {
							goto l56
						}
						position++
						if !_rules[rule_]() {
							goto l56
						}
						if !_rules[ruleadditive]() {
							goto l56
						}
						if !_rules[ruleAction21]() {
							goto l56
						}
						goto l55
					l56:
						position, tokenIndex = position55, tokenIndex55
						if !_rules[rule_]() {
							goto l57
						}
						if buffer[position] != rune('>') {
							goto l57
						}
						position++
						if buffer[position] != rune('=') {
							goto l57
						}
						position++
						if !_rules[rule_]() {
							goto l57
						}
						if !_rules[ruleadditive]() {
							goto l57
						}
						if !_rules[ruleAction22]() {
							goto l57
						}
						goto l55
					l57:
						position, tokenIndex = position55, tokenIndex55
						if !_rules[rule_]() {
							goto l58
						}
						if buffer[position] != rune('<') {
							goto l58
						}
						position++
						if !_rules[rule_]() {
							goto l58
						}
						if !_rules[ruleadditive]() {
							goto l58
						}
						if !_rules[ruleAction23]() {
							goto l58
						}
						goto l55
					l58:
						position, tokenIndex = position55, tokenIndex55
						if !_rules[rule_]() {
							goto l54
						}
						if buffer[position] != rune('>') {
							goto l54
						}
						position++
						if !_rules[rule_]() {
							goto l54
						}
						if !_rules[ruleadditive]() {
							goto l54
						}
						if !_rules[ruleAction24]() {
							goto l54
						}
					}
				l55:
					goto l53
				l54:
					position, tokenIndex = position54, tokenIndex54
				}
				add(rulecompare, position52)
			}
			return true
		l51:
			position, tokenIndex = position51, tokenIndex51
			return false
		},
		/* 11 additive <- <(multitive ((_ '+' _ multitive Action25) / (_ '-' _ multitive Action26))*)> */
		func() bool {
			position59, tokenIndex59 := position, tokenIndex
			{
				position60 := position
				if !_rules[rulemultitive]() {
					goto l59
				}
			l61:
				{
					position62, tokenIndex62 := position, tokenIndex
					{
						position63, tokenIndex63 := position, tokenIndex
						if !_rules[rule_]() {
							goto l64
						}
						if buffer[position] != rune('+') {
							goto l64
						}
						position++
						if !_rules[rule_]() {
							goto l64
						}
						if !_rules[rulemultitive]() {
							goto l64
						}
						if !_rules[ruleAction25]() {
							goto l64
						}
						goto l63
					l64:
						position, tokenIndex = position63, tokenIndex63
						if !_rules[rule_]() {
							goto l62
						}
						if buffer[position] != rune('-') {
							goto l62
						}
						position++
						if !_rules[rule_]() {
							goto l62
						}
						if !_rules[rulemultitive]() {
							goto l62
						}
						if !_rules[ruleAction26]() {
							goto l62
						}
					}
				l63:
					goto l61
				l62:
					position, tokenIndex = position62, tokenIndex62
				}
				add(ruleadditive, position60)
			}
			return true
		l59:
			position, tokenIndex = position59, tokenIndex59
			return false
		},
		/* 12 multitive <- <(factor ((_ '*' _ factor Action27) / (_ '/' _ factor Action28) / (_ '%' _ factor Action29))*)> */
		func() bool {
			position65, tokenIndex65 := position, tokenIndex
			{
				position66 := position
				if !_rules[rulefactor]() {
					goto l65
				}
			l67:
				{
					position68, tokenIndex68 := position, tokenIndex
					{
						position69, tokenIndex69 := position, tokenIndex
						if !_rules[rule_]() {
							goto l70
						}
						if buffer[position] != rune('*') {
							goto l70
						}
						position++
						if !_rules[rule_]() {
							goto l70
						}
						if !_rules[rulefactor]() {
							goto l70
						}
						if !_rules[ruleAction27]() {
							goto l70
						}
						goto l69
					l70:
						position, tokenIndex = position69, tokenIndex69
						if !_rules[rule_]() {
							goto l71
						}
						if buffer[position] != rune('/') {
							goto l71
						}
						position++
						if !_rules[rule_]() {
							goto l71
						}
						if !_rules[rulefactor]() {
							goto l71
						}
						if !_rules[ruleAction28]() {
							goto l71
						}
						goto l69
					l71:
						position, tokenIndex = position69, tokenIndex69
						if !_rules[rule_]() {
							goto l68
						}
						if buffer[position] != rune('%') {
							goto l68
						}
						position++
						if !_rules[rule_]() {
							goto l68
						}
						if !_rules[rulefactor]() {
							goto l68
						}
						if !_rules[ruleAction29]() {
							goto l68
						}
					}
				l69:
					goto l67
				l68:
					position, tokenIndex = position68, tokenIndex68
				}
				add(rulemultitive, position66)
			}
			return true
		l65:
			position, tokenIndex = position65, tokenIndex65
			return false
		},
		/* 13 factor <- <(unary / postfix)> */
		func() bool {
			position72, tokenIndex72 := position, tokenIndex
			{
				position73 := position
				{
					position74, tokenIndex74 := position, tokenIndex
					if !_rules[ruleunary]() {
						goto l75
					}
					goto l74
				l75:
					position, tokenIndex = position74, tokenIndex74
					if !_rules[rulepostfix]() {
						goto l72
					}
				}
			l74:
				add(rulefactor, position73)
			}
			return true
		l72:
			position, tokenIndex = position72, tokenIndex72
			return false
		},
		/* 14 unary <- <(((<'-'> Action30) / (<'+'> Action31) / (<'!'> Action32)) _ factor Action33)> */
		func() bool {
			position76, tokenIndex76 := position, tokenIndex
			{
				position77 := position
				{
					position78, tokenIndex78 := position, tokenIndex
					{
						position80 := position
						if buffer[position] != rune('-') {
							goto l79
						}
						position++
						add(rulePegText, position80)
					}
					if !_rules[ruleAction30]() {
						goto l79
					}
					goto l78
				l79:
					position, tokenIndex = position78, tokenIndex78
					{
						position82 := position
						if buffer[position] != rune('+') {
							goto l81
						}
						position++
						add(rulePegText, position82)
					}
					if !_rules[ruleAction31]() {
						goto l81
					}
					goto l78
				l81:
					position, tokenIndex = position78, tokenIndex78
					{
						position83 := position
						if buffer[position] != rune('!') {
							goto l76
						}
						position++
						add(rulePegText, position83)
					}
					if !_rules[ruleAction32]() {
						goto l76
					}
				}
			l78:
				if !_rules[rule_]() {
					goto l76
				}
				if !_rules[rulefactor]() {
					goto l76
				}
				if !_rules[ruleAction33]() {
					goto l76
				}
				add(ruleunary, position77)
			}
			return true
		l76:
			position, tokenIndex = position76, tokenIndex76
			return false
		},
		/* 15 postfix <- <(primary funcall*)> */
		func() bool {
			position84, tokenIndex84 := position, tokenIndex
			{
				position85 := position
				if !_rules[ruleprimary]() {
					goto l84
				}
			l86:
				{
					position87, tokenIndex87 := position, tokenIndex
					if !_rules[rulefuncall]() {
						goto l87
					}
					goto l86
				l87:
					position, tokenIndex = position87, tokenIndex87
				}
				add(rulepostfix, position85)
			}
			return true
		l84:
			position, tokenIndex = position84, tokenIndex84
			return false
		},
		/* 16 funcall <- <((_ '(' Action34 sp _ <')'> Action35) / ('(' Action36 sp _ expression (_ ',' sp _ expression)* (_ ',')? sp _ <')'> Action37))> */
		func() bool {
			position88, tokenIndex88 := position, tokenIndex
			{
				position89 := position
				{
					position90, tokenIndex90 := position, tokenIndex
					if !_rules[rule_]() {
						goto l91
					}
					if buffer[position] != rune('(') {
						goto l91
					}
					position++
					if !_rules[ruleAction34]() {
						goto l91
					}
					if !_rules[rulesp]() {
						goto l91
					}
					if !_rules[rule_]() {
						goto l91
					}
					{
						position92 := position
						if buffer[position] != rune(')') {
							goto l91
						}
						position++
						add(rulePegText, position92)
					}
					if !_rules[ruleAction35]() {
						goto l91
					}
					goto l90
				l91:
					position, tokenIndex = position90, tokenIndex90
					if buffer[position] != rune('(') {
						goto l88
					}
					position++
					if !_rules[ruleAction36]() {
						goto l88
					}
					if !_rules[rulesp]() {
						goto l88
					}
					if !_rules[rule_]() {
						goto l88
					}
					if !_rules[ruleexpression]() {
						goto l88
					}
				l93:
					{
						position94, tokenIndex94 := position, tokenIndex
						if !_rules[rule_]() {
							goto l94
						}
						if buffer[position] != rune(',') {
							goto l94
						}
						position++
						if !_rules[rulesp]() {
							goto l94
						}
						if !_rules[rule_]() {
							goto l94
						}
						if !_rules[ruleexpression]() {
							goto l94
						}
						goto l93
					l94:
						position, tokenIndex = position94, tokenIndex94
					}
					{
						position95, tokenIndex95 := position, tokenIndex
						if !_rules[rule_]() {
							goto l95
						}
						if buffer[position] != rune(',') {
							goto l95
						}
						position++
						goto l96
					l95:
						position, tokenIndex = position95, tokenIndex95
					}
				l96:
					if !_rules[rulesp]() {
						goto l88
					}
					if !_rules[rule_]() {
						goto l88
					}
					{
						position97 := position
						if buffer[position] != rune(')') {
							goto l88
						}
						position++
						add(rulePegText, position97)
					}
					if !_rules[ruleAction37]() {
						goto l88
					}
				}
			l90:
				add(rulefuncall, position89)
			}
			return true
		l88:
			position, tokenIndex = position88, tokenIndex88
			return false
		},
		/* 17 primary <- <(('(' _ sp _ expression _ sp _ ')') / ('t' 'r' 'u' 'e' Action38) / ('f' 'a' 'l' 's' 'e' Action39) / float / integer / string / identifier)> */
		func() bool {
			position98, tokenIndex98 := position, tokenIndex
			{
				position99 := position
				{
					position100, tokenIndex100 := position, tokenIndex
					if buffer[position] != rune('(') {
						goto l101
					}
					position++
					if !_rules[rule_]() {
						goto l101
					}
					if !_rules[rulesp]() {
						goto l101
					}
					if !_rules[rule_]() {
						goto l101
					}
					if !_rules[ruleexpression]() {
						goto l101
					}
					if !_rules[rule_]() {
						goto l101
					}
					if !_rules[rulesp]() {
						goto l101
					}
					if !_rules[rule_]() {
						goto l101
					}
					if buffer[position] != rune(')') {
						goto l101
					}
					position++
					goto l100
				l101:
					position, tokenIndex = position100, tokenIndex100
					if buffer[position] != rune('t') {
						goto l102
					}
					position++
					if buffer[position] != rune('r') {
						goto l102
					}
					position++
					if buffer[position] != rune('u') {
						goto l102
					}
					position++
					if buffer[position] != rune('e') {
						goto l102
					}
					position++
					if !_rules[ruleAction38]() {
						goto l102
					}
					goto l100
				l102:
					position, tokenIndex = position100, tokenIndex100
					if buffer[position] != rune('f') {
						goto l103
					}
					position++
					if buffer[position] != rune('a') {
						goto l103
					}
					position++
					if buffer[position] != rune('l') {
						goto l103
					}
					position++
					if buffer[position] != rune('s') {
						goto l103
					}
					position++
					if buffer[position] != rune('e') {
						goto l103
					}
					position++
					if !_rules[ruleAction39]() {
						goto l103
					}
					goto l100
				l103:
					position, tokenIndex = position100, tokenIndex100
					if !_rules[rulefloat]() {
						goto l104
					}
					goto l100
				l104:
					position, tokenIndex = position100, tokenIndex100
					if !_rules[ruleinteger]() {
						goto l105
					}
					goto l100
				l105:
					position, tokenIndex = position100, tokenIndex100
					if !_rules[rulestring]() {
						goto l106
					}
					goto l100
				l106:
					position, tokenIndex = position100, tokenIndex100
					if !_rules[ruleidentifier]() {
						goto l98
					}
				}
			l100:
				add(ruleprimary, position99)
			}
			return true
		l98:
			position, tokenIndex = position98, tokenIndex98
			return false
		},
		/* 18 float <- <(<(('0' / ([1-9] [0-9]*)) '.' [0-9]+ (('e' / 'E') ('+' / '-')? [0-9]+)?)> Action40)> */
		func() bool {
			position107, tokenIndex107 := position, tokenIndex
			{
				position108 := position
				{
					position109 := position
					{
						position110, tokenIndex110 := position, tokenIndex
						if buffer[position] != rune('0') {
							goto l111
						}
						position++
						goto l110
					l111:
						position, tokenIndex = position110, tokenIndex110
						if c := buffer[position]; c < rune('1') || c > rune('9') {
							goto l107
						}
						position++
					l112:
						{
							position113, tokenIndex113 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l113
							}
							position++
							goto l112
						l113:
							position, tokenIndex = position113, tokenIndex113
						}
					}
				l110:
					if buffer[position] != rune('.') {
						goto l107
					}
					position++
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l107
					}
					position++
				l114:
					{
						position115, tokenIndex115 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l115
						}
						position++
						goto l114
					l115:
						position, tokenIndex = position115, tokenIndex115
					}
					{
						position116, tokenIndex116 := position, tokenIndex
						{
							position118, tokenIndex118 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l119
							}
							position++
							goto l118
						l119:
							position, tokenIndex = position118, tokenIndex118
							if buffer[position] != rune('E') {
								goto l116
							}
							position++
						}
					l118:
						{
							position120, tokenIndex120 := position, tokenIndex
							{
								position122, tokenIndex122 := position, tokenIndex
								if buffer[position] != rune('+') {
									goto l123
								}
								position++
								goto l122
							l123:
								position, tokenIndex = position122, tokenIndex122
								if buffer[position] != rune('-') {
									goto l120
								}
								position++
							}
						l122:
							goto l121
						l120:
							position, tokenIndex = position120, tokenIndex120
						}
					l121:
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l116
						}
						position++
					l124:
						{
							position125, tokenIndex125 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l125
							}
							position++
							goto l124
						l125:
							position, tokenIndex = position125, tokenIndex125
						}
						goto l117
					l116:
						position, tokenIndex = position116, tokenIndex116
					}
				l117:
					add(rulePegText, position109)
				}
				if !_rules[ruleAction40]() {
					goto l107
				}
				add(rulefloat, position108)
			}
			return true
		l107:
			position, tokenIndex = position107, tokenIndex107
			return false
		},
		/* 19 integer <- <(<('0' / ([1-9] [0-9]*))> Action41)> */
		func() bool {
			position126, tokenIndex126 := position, tokenIndex
			{
				position127 := position
				{
					position128 := position
					{
						position129, tokenIndex129 := position, tokenIndex
						if buffer[position] != rune('0') {
							goto l130
						}
						position++
						goto l129
					l130:
						position, tokenIndex = position129, tokenIndex129
						if c := buffer[position]; c < rune('1') || c > rune('9') {
							goto l126
						}
						position++
					l131:
						{
							position132, tokenIndex132 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l132
							}
							position++
							goto l131
						l132:
							position, tokenIndex = position132, tokenIndex132
						}
					}
				l129:
					add(rulePegText, position128)
				}
				if !_rules[ruleAction41]() {
					goto l126
				}
				add(ruleinteger, position127)
			}
			return true
		l126:
			position, tokenIndex = position126, tokenIndex126
			return false
		},
		/* 20 string <- <('"' <(!'"' .)*> '"' Action42)> */
		func() bool {
			position133, tokenIndex133 := position, tokenIndex
			{
				position134 := position
				if buffer[position] != rune('"') {
					goto l133
				}
				position++
				{
					position135 := position
				l136:
					{
						position137, tokenIndex137 := position, tokenIndex
						{
							position138, tokenIndex138 := position, tokenIndex
							if buffer[position] != rune('"') {
								goto l138
							}
							position++
							goto l137
						l138:
							position, tokenIndex = position138, tokenIndex138
						}
						if !matchDot() {
							goto l137
						}
						goto l136
					l137:
						position, tokenIndex = position137, tokenIndex137
					}
					add(rulePegText, position135)
				}
				if buffer[position] != rune('"') {
					goto l133
				}
				position++
				if !_rules[ruleAction42]() {
					goto l133
				}
				add(rulestring, position134)
			}
			return true
		l133:
			position, tokenIndex = position133, tokenIndex133
			return false
		},
		/* 21 identifier <- <(<(('_' / [a-z] / [A-Z]) ('_' / [a-z] / [A-Z] / [0-9])*)> Action43)> */
		func() bool {
			position139, tokenIndex139 := position, tokenIndex
			{
				position140 := position
				{
					position141 := position
					{
						position142, tokenIndex142 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l143
						}
						position++
						goto l142
					l143:
						position, tokenIndex = position142, tokenIndex142
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l144
						}
						position++
						goto l142
					l144:
						position, tokenIndex = position142, tokenIndex142
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l139
						}
						position++
					}
				l142:
				l145:
					{
						position146, tokenIndex146 := position, tokenIndex
						{
							position147, tokenIndex147 := position, tokenIndex
							if buffer[position] != rune('_') {
								goto l148
							}
							position++
							goto l147
						l148:
							position, tokenIndex = position147, tokenIndex147
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l149
							}
							position++
							goto l147
						l149:
							position, tokenIndex = position147, tokenIndex147
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l150
							}
							position++
							goto l147
						l150:
							position, tokenIndex = position147, tokenIndex147
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l146
							}
							position++
						}
					l147:
						goto l145
					l146:
						position, tokenIndex = position146, tokenIndex146
					}
					add(rulePegText, position141)
				}
				if !_rules[ruleAction43]() {
					goto l139
				}
				add(ruleidentifier, position140)
			}
			return true
		l139:
			position, tokenIndex = position139, tokenIndex139
			return false
		},
		/* 22 _ <- <(' ' / '\t')*> */
		func() bool {
			{
				position152 := position
			l153:
				{
					position154, tokenIndex154 := position, tokenIndex
					{
						position155, tokenIndex155 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l156
						}
						position++
						goto l155
					l156:
						position, tokenIndex = position155, tokenIndex155
						if buffer[position] != rune('\t') {
							goto l154
						}
						position++
					}
				l155:
					goto l153
				l154:
					position, tokenIndex = position154, tokenIndex154
				}
				add(rule_, position152)
			}
			return true
		},
		/* 23 nl <- <('\r' / '\n')+> */
		func() bool {
			position157, tokenIndex157 := position, tokenIndex
			{
				position158 := position
				{
					position161, tokenIndex161 := position, tokenIndex
					if buffer[position] != rune('\r') {
						goto l162
					}
					position++
					goto l161
				l162:
					position, tokenIndex = position161, tokenIndex161
					if buffer[position] != rune('\n') {
						goto l157
					}
					position++
				}
			l161:
			l159:
				{
					position160, tokenIndex160 := position, tokenIndex
					{
						position163, tokenIndex163 := position, tokenIndex
						if buffer[position] != rune('\r') {
							goto l164
						}
						position++
						goto l163
					l164:
						position, tokenIndex = position163, tokenIndex163
						if buffer[position] != rune('\n') {
							goto l160
						}
						position++
					}
				l163:
					goto l159
				l160:
					position, tokenIndex = position160, tokenIndex160
				}
				add(rulenl, position158)
			}
			return true
		l157:
			position, tokenIndex = position157, tokenIndex157
			return false
		},
		/* 24 comment <- <('#' (!('\r' / '\n') .)*)> */
		func() bool {
			position165, tokenIndex165 := position, tokenIndex
			{
				position166 := position
				if buffer[position] != rune('#') {
					goto l165
				}
				position++
			l167:
				{
					position168, tokenIndex168 := position, tokenIndex
					{
						position169, tokenIndex169 := position, tokenIndex
						{
							position170, tokenIndex170 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l171
							}
							position++
							goto l170
						l171:
							position, tokenIndex = position170, tokenIndex170
							if buffer[position] != rune('\n') {
								goto l169
							}
							position++
						}
					l170:
						goto l168
					l169:
						position, tokenIndex = position169, tokenIndex169
					}
					if !matchDot() {
						goto l168
					}
					goto l167
				l168:
					position, tokenIndex = position168, tokenIndex168
				}
				add(rulecomment, position166)
			}
			return true
		l165:
			position, tokenIndex = position165, tokenIndex165
			return false
		},
		/* 25 sp <- <(_ comment? nl _)*> */
		func() bool {
			{
				position173 := position
			l174:
				{
					position175, tokenIndex175 := position, tokenIndex
					if !_rules[rule_]() {
						goto l175
					}
					{
						position176, tokenIndex176 := position, tokenIndex
						if !_rules[rulecomment]() {
							goto l176
						}
						goto l177
					l176:
						position, tokenIndex = position176, tokenIndex176
					}
				l177:
					if !_rules[rulenl]() {
						goto l175
					}
					if !_rules[rule_]() {
						goto l175
					}
					goto l174
				l175:
					position, tokenIndex = position175, tokenIndex175
				}
				add(rulesp, position173)
			}
			return true
		},
		/* 27 Action0 <- <{ p.PushExpressionStatement() }> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		/* 28 Action1 <- <{ p.PopBlock() }> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		nil,
		/* 30 Action2 <- <{ p.PushBlock(begin) }> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 31 Action3 <- <{ p.CompleteBlock(end) }> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 32 Action4 <- <{ p.PushWhile(begin) }> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 33 Action5 <- <{ p.CompleteWhile() }> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 34 Action6 <- <{ p.PushIfPart(begin) }> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 35 Action7 <- <{ p.CompleteIfPart() }> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 36 Action8 <- <{ p.PushElsifPart(begin) }> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		/* 37 Action9 <- <{ p.CompleteElsifPart() }> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
		/* 38 Action10 <- <{ p.PushElsePart(begin) }> */
		func() bool {
			{
				add(ruleAction10, position)
			}
			return true
		},
		/* 39 Action11 <- <{ p.CompleteElsePart() }> */
		func() bool {
			{
				add(ruleAction11, position)
			}
			return true
		},
		/* 40 Action12 <- <{ p.CompleteIf() }> */
		func() bool {
			{
				add(ruleAction12, position)
			}
			return true
		},
		/* 41 Action13 <- <{ p.PushAssign("") }> */
		func() bool {
			{
				add(ruleAction13, position)
			}
			return true
		},
		/* 42 Action14 <- <{ p.PushAssign("+") }> */
		func() bool {
			{
				add(ruleAction14, position)
			}
			return true
		},
		/* 43 Action15 <- <{ p.PushAssign("-") }> */
		func() bool {
			{
				add(ruleAction15, position)
			}
			return true
		},
		/* 44 Action16 <- <{ p.PushAssign("*") }> */
		func() bool {
			{
				add(ruleAction16, position)
			}
			return true
		},
		/* 45 Action17 <- <{ p.PushAssign("/") }> */
		func() bool {
			{
				add(ruleAction17, position)
			}
			return true
		},
		/* 46 Action18 <- <{ p.PushAssign("%") }> */
		func() bool {
			{
				add(ruleAction18, position)
			}
			return true
		},
		/* 47 Action19 <- <{ p.PushBinOp("==") }> */
		func() bool {
			{
				add(ruleAction19, position)
			}
			return true
		},
		/* 48 Action20 <- <{ p.PushBinOp("!=") }> */
		func() bool {
			{
				add(ruleAction20, position)
			}
			return true
		},
		/* 49 Action21 <- <{ p.PushBinOp("<=") }> */
		func() bool {
			{
				add(ruleAction21, position)
			}
			return true
		},
		/* 50 Action22 <- <{ p.PushBinOp(">=") }> */
		func() bool {
			{
				add(ruleAction22, position)
			}
			return true
		},
		/* 51 Action23 <- <{ p.PushBinOp("<") }> */
		func() bool {
			{
				add(ruleAction23, position)
			}
			return true
		},
		/* 52 Action24 <- <{ p.PushBinOp(">") }> */
		func() bool {
			{
				add(ruleAction24, position)
			}
			return true
		},
		/* 53 Action25 <- <{ p.PushBinOp("+") }> */
		func() bool {
			{
				add(ruleAction25, position)
			}
			return true
		},
		/* 54 Action26 <- <{ p.PushBinOp("-") }> */
		func() bool {
			{
				add(ruleAction26, position)
			}
			return true
		},
		/* 55 Action27 <- <{ p.PushBinOp("*") }> */
		func() bool {
			{
				add(ruleAction27, position)
			}
			return true
		},
		/* 56 Action28 <- <{ p.PushBinOp("/") }> */
		func() bool {
			{
				add(ruleAction28, position)
			}
			return true
		},
		/* 57 Action29 <- <{ p.PushBinOp("%") }> */
		func() bool {
			{
				add(ruleAction29, position)
			}
			return true
		},
		/* 58 Action30 <- <{ p.PushUnaryOp(begin, end, "-") }> */
		func() bool {
			{
				add(ruleAction30, position)
			}
			return true
		},
		/* 59 Action31 <- <{ p.PushUnaryOp(begin, end, "+") }> */
		func() bool {
			{
				add(ruleAction31, position)
			}
			return true
		},
		/* 60 Action32 <- <{ p.PushUnaryOp(begin, end, "!") }> */
		func() bool {
			{
				add(ruleAction32, position)
			}
			return true
		},
		/* 61 Action33 <- <{ p.CompleteUnary() }> */
		func() bool {
			{
				add(ruleAction33, position)
			}
			return true
		},
		/* 62 Action34 <- <{ p.PushApply() }> */
		func() bool {
			{
				add(ruleAction34, position)
			}
			return true
		},
		/* 63 Action35 <- <{ p.CompleteApply(end) }> */
		func() bool {
			{
				add(ruleAction35, position)
			}
			return true
		},
		/* 64 Action36 <- <{ p.PushApply() }> */
		func() bool {
			{
				add(ruleAction36, position)
			}
			return true
		},
		/* 65 Action37 <- <{ p.CompleteApply(end) }> */
		func() bool {
			{
				add(ruleAction37, position)
			}
			return true
		},
		/* 66 Action38 <- <{ p.PushBooleanLiteral(begin, end, true) }> */
		func() bool {
			{
				add(ruleAction38, position)
			}
			return true
		},
		/* 67 Action39 <- <{ p.PushBooleanLiteral(begin, end, false) }> */
		func() bool {
			{
				add(ruleAction39, position)
			}
			return true
		},
		/* 68 Action40 <- <{ p.PushFloatLiteral(begin, end, text) }> */
		func() bool {
			{
				add(ruleAction40, position)
			}
			return true
		},
		/* 69 Action41 <- <{ p.PushIntLiteral(begin, end, text) }> */
		func() bool {
			{
				add(ruleAction41, position)
			}
			return true
		},
		/* 70 Action42 <- <{ p.PushStringLiteral(begin, end, text) }> */
		func() bool {
			{
				add(ruleAction42, position)
			}
			return true
		},
		/* 71 Action43 <- <{ p.PushIdentifier(begin, end, text) }> */
		func() bool {
			{
				add(ruleAction43, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
