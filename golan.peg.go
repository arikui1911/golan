package golan

// Code generated by peg golan.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleroot
	ruleEOT
	rulestatements
	rulestatement
	ruleblock
	rulewhile
	ruleif
	ruleexpression
	ruleassign
	ruleequality
	rulecompare
	ruleadditive
	rulemultitive
	rulefactor
	ruleunary
	rulepostfix
	rulefuncall
	ruleprimary
	ruleidentifier
	rule_
	rulenl
	rulecomment
	rulesp
	ruleAction0
	ruleAction1
	rulePegText
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
)

var rul3s = [...]string{
	"Unknown",
	"root",
	"EOT",
	"statements",
	"statement",
	"block",
	"while",
	"if",
	"expression",
	"assign",
	"equality",
	"compare",
	"additive",
	"multitive",
	"factor",
	"unary",
	"postfix",
	"funcall",
	"primary",
	"identifier",
	"_",
	"nl",
	"comment",
	"sp",
	"Action0",
	"Action1",
	"PegText",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	ASTBuilder

	Buffer string
	buffer []rune
	rules  [60]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *Parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.PushExpressionStatement()
		case ruleAction1:
			p.PopBlock()
		case ruleAction2:
			p.PushBlock(begin)
		case ruleAction3:
			p.CompleteBlock(end)
		case ruleAction4:
			p.PushWhile(begin)
		case ruleAction5:
			p.CompleteWhile()
		case ruleAction6:
			p.PushIfPart(begin)
		case ruleAction7:
			p.CompleteIfPart()
		case ruleAction8:
			p.PushElsifPart(begin)
		case ruleAction9:
			p.CompleteElsifPart()
		case ruleAction10:
			p.PushElsePart(begin)
		case ruleAction11:
			p.CompleteElsePart()
		case ruleAction12:
			p.CompleteIf()
		case ruleAction13:
			p.PushAssign()
		case ruleAction14:
			p.PushBinOp("==")
		case ruleAction15:
			p.PushBinOp("!=")
		case ruleAction16:
			p.PushBinOp("<=")
		case ruleAction17:
			p.PushBinOp(">=")
		case ruleAction18:
			p.PushBinOp("<")
		case ruleAction19:
			p.PushBinOp(">")
		case ruleAction20:
			p.PushBinOp("+")
		case ruleAction21:
			p.PushBinOp("-")
		case ruleAction22:
			p.PushBinOp("*")
		case ruleAction23:
			p.PushBinOp("/")
		case ruleAction24:
			p.PushBinOp("%")
		case ruleAction25:
			p.PushUnaryOp(begin, end, "-")
		case ruleAction26:
			p.PushUnaryOp(begin, end, "+")
		case ruleAction27:
			p.PushUnaryOp(begin, end, "!")
		case ruleAction28:
			p.CompleteUnary()
		case ruleAction29:
			p.PushApply()
		case ruleAction30:
			p.CompleteApply(end)
		case ruleAction31:
			p.PushApply()
		case ruleAction32:
			p.CompleteApply(end)
		case ruleAction33:
			p.PushIntLiteral(begin, end, text)
		case ruleAction34:
			p.PushIdentifier(begin, end, text)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 root <- <(statements EOT)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulestatements]() {
					goto l0
				}
				if !_rules[ruleEOT]() {
					goto l0
				}
				add(ruleroot, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 EOT <- <!.> */
		func() bool {
			position2, tokenIndex2 := position, tokenIndex
			{
				position3 := position
				{
					position4, tokenIndex4 := position, tokenIndex
					if !matchDot() {
						goto l4
					}
					goto l2
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
				add(ruleEOT, position3)
			}
			return true
		l2:
			position, tokenIndex = position2, tokenIndex2
			return false
		},
		/* 2 statements <- <((_ sp _ statement)* _ sp _)> */
		func() bool {
			position5, tokenIndex5 := position, tokenIndex
			{
				position6 := position
			l7:
				{
					position8, tokenIndex8 := position, tokenIndex
					if !_rules[rule_]() {
						goto l8
					}
					if !_rules[rulesp]() {
						goto l8
					}
					if !_rules[rule_]() {
						goto l8
					}
					if !_rules[rulestatement]() {
						goto l8
					}
					goto l7
				l8:
					position, tokenIndex = position8, tokenIndex8
				}
				if !_rules[rule_]() {
					goto l5
				}
				if !_rules[rulesp]() {
					goto l5
				}
				if !_rules[rule_]() {
					goto l5
				}
				add(rulestatements, position6)
			}
			return true
		l5:
			position, tokenIndex = position5, tokenIndex5
			return false
		},
		/* 3 statement <- <((expression _ comment? nl Action0) / (block Action1) / while / if)> */
		func() bool {
			position9, tokenIndex9 := position, tokenIndex
			{
				position10 := position
				{
					position11, tokenIndex11 := position, tokenIndex
					if !_rules[ruleexpression]() {
						goto l12
					}
					if !_rules[rule_]() {
						goto l12
					}
					{
						position13, tokenIndex13 := position, tokenIndex
						if !_rules[rulecomment]() {
							goto l13
						}
						goto l14
					l13:
						position, tokenIndex = position13, tokenIndex13
					}
				l14:
					if !_rules[rulenl]() {
						goto l12
					}
					if !_rules[ruleAction0]() {
						goto l12
					}
					goto l11
				l12:
					position, tokenIndex = position11, tokenIndex11
					if !_rules[ruleblock]() {
						goto l15
					}
					if !_rules[ruleAction1]() {
						goto l15
					}
					goto l11
				l15:
					position, tokenIndex = position11, tokenIndex11
					if !_rules[rulewhile]() {
						goto l16
					}
					goto l11
				l16:
					position, tokenIndex = position11, tokenIndex11
					if !_rules[ruleif]() {
						goto l9
					}
				}
			l11:
				add(rulestatement, position10)
			}
			return true
		l9:
			position, tokenIndex = position9, tokenIndex9
			return false
		},
		/* 4 block <- <(<'{'> Action2 statements <'}'> Action3)> */
		func() bool {
			position17, tokenIndex17 := position, tokenIndex
			{
				position18 := position
				{
					position19 := position
					if buffer[position] != rune('{') {
						goto l17
					}
					position++
					add(rulePegText, position19)
				}
				if !_rules[ruleAction2]() {
					goto l17
				}
				if !_rules[rulestatements]() {
					goto l17
				}
				{
					position20 := position
					if buffer[position] != rune('}') {
						goto l17
					}
					position++
					add(rulePegText, position20)
				}
				if !_rules[ruleAction3]() {
					goto l17
				}
				add(ruleblock, position18)
			}
			return true
		l17:
			position, tokenIndex = position17, tokenIndex17
			return false
		},
		/* 5 while <- <(<('w' 'h' 'i' 'l' 'e')> Action4 _ expression _ block Action5)> */
		func() bool {
			position21, tokenIndex21 := position, tokenIndex
			{
				position22 := position
				{
					position23 := position
					if buffer[position] != rune('w') {
						goto l21
					}
					position++
					if buffer[position] != rune('h') {
						goto l21
					}
					position++
					if buffer[position] != rune('i') {
						goto l21
					}
					position++
					if buffer[position] != rune('l') {
						goto l21
					}
					position++
					if buffer[position] != rune('e') {
						goto l21
					}
					position++
					add(rulePegText, position23)
				}
				if !_rules[ruleAction4]() {
					goto l21
				}
				if !_rules[rule_]() {
					goto l21
				}
				if !_rules[ruleexpression]() {
					goto l21
				}
				if !_rules[rule_]() {
					goto l21
				}
				if !_rules[ruleblock]() {
					goto l21
				}
				if !_rules[ruleAction5]() {
					goto l21
				}
				add(rulewhile, position22)
			}
			return true
		l21:
			position, tokenIndex = position21, tokenIndex21
			return false
		},
		/* 6 if <- <(<('i' 'f')> Action6 _ expression _ sp _ block Action7 (sp _ <('e' 'l' 's' 'i' 'f')> Action8 _ expression _ sp _ block Action9)* (sp _ <('e' 'l' 's' 'e')> Action10 _ sp _ block Action11)? Action12)> */
		func() bool {
			position24, tokenIndex24 := position, tokenIndex
			{
				position25 := position
				{
					position26 := position
					if buffer[position] != rune('i') {
						goto l24
					}
					position++
					if buffer[position] != rune('f') {
						goto l24
					}
					position++
					add(rulePegText, position26)
				}
				if !_rules[ruleAction6]() {
					goto l24
				}
				if !_rules[rule_]() {
					goto l24
				}
				if !_rules[ruleexpression]() {
					goto l24
				}
				if !_rules[rule_]() {
					goto l24
				}
				if !_rules[rulesp]() {
					goto l24
				}
				if !_rules[rule_]() {
					goto l24
				}
				if !_rules[ruleblock]() {
					goto l24
				}
				if !_rules[ruleAction7]() {
					goto l24
				}
			l27:
				{
					position28, tokenIndex28 := position, tokenIndex
					if !_rules[rulesp]() {
						goto l28
					}
					if !_rules[rule_]() {
						goto l28
					}
					{
						position29 := position
						if buffer[position] != rune('e') {
							goto l28
						}
						position++
						if buffer[position] != rune('l') {
							goto l28
						}
						position++
						if buffer[position] != rune('s') {
							goto l28
						}
						position++
						if buffer[position] != rune('i') {
							goto l28
						}
						position++
						if buffer[position] != rune('f') {
							goto l28
						}
						position++
						add(rulePegText, position29)
					}
					if !_rules[ruleAction8]() {
						goto l28
					}
					if !_rules[rule_]() {
						goto l28
					}
					if !_rules[ruleexpression]() {
						goto l28
					}
					if !_rules[rule_]() {
						goto l28
					}
					if !_rules[rulesp]() {
						goto l28
					}
					if !_rules[rule_]() {
						goto l28
					}
					if !_rules[ruleblock]() {
						goto l28
					}
					if !_rules[ruleAction9]() {
						goto l28
					}
					goto l27
				l28:
					position, tokenIndex = position28, tokenIndex28
				}
				{
					position30, tokenIndex30 := position, tokenIndex
					if !_rules[rulesp]() {
						goto l30
					}
					if !_rules[rule_]() {
						goto l30
					}
					{
						position32 := position
						if buffer[position] != rune('e') {
							goto l30
						}
						position++
						if buffer[position] != rune('l') {
							goto l30
						}
						position++
						if buffer[position] != rune('s') {
							goto l30
						}
						position++
						if buffer[position] != rune('e') {
							goto l30
						}
						position++
						add(rulePegText, position32)
					}
					if !_rules[ruleAction10]() {
						goto l30
					}
					if !_rules[rule_]() {
						goto l30
					}
					if !_rules[rulesp]() {
						goto l30
					}
					if !_rules[rule_]() {
						goto l30
					}
					if !_rules[ruleblock]() {
						goto l30
					}
					if !_rules[ruleAction11]() {
						goto l30
					}
					goto l31
				l30:
					position, tokenIndex = position30, tokenIndex30
				}
			l31:
				if !_rules[ruleAction12]() {
					goto l24
				}
				add(ruleif, position25)
			}
			return true
		l24:
			position, tokenIndex = position24, tokenIndex24
			return false
		},
		/* 7 expression <- <(assign / equality)> */
		func() bool {
			position33, tokenIndex33 := position, tokenIndex
			{
				position34 := position
				{
					position35, tokenIndex35 := position, tokenIndex
					if !_rules[ruleassign]() {
						goto l36
					}
					goto l35
				l36:
					position, tokenIndex = position35, tokenIndex35
					if !_rules[ruleequality]() {
						goto l33
					}
				}
			l35:
				add(ruleexpression, position34)
			}
			return true
		l33:
			position, tokenIndex = position33, tokenIndex33
			return false
		},
		/* 8 assign <- <(identifier _ '=' _ expression Action13)> */
		func() bool {
			position37, tokenIndex37 := position, tokenIndex
			{
				position38 := position
				if !_rules[ruleidentifier]() {
					goto l37
				}
				if !_rules[rule_]() {
					goto l37
				}
				if buffer[position] != rune('=') {
					goto l37
				}
				position++
				if !_rules[rule_]() {
					goto l37
				}
				if !_rules[ruleexpression]() {
					goto l37
				}
				if !_rules[ruleAction13]() {
					goto l37
				}
				add(ruleassign, position38)
			}
			return true
		l37:
			position, tokenIndex = position37, tokenIndex37
			return false
		},
		/* 9 equality <- <(compare ((_ ('=' '=') _ compare Action14) / (_ ('!' '=') _ compare Action15))*)> */
		func() bool {
			position39, tokenIndex39 := position, tokenIndex
			{
				position40 := position
				if !_rules[rulecompare]() {
					goto l39
				}
			l41:
				{
					position42, tokenIndex42 := position, tokenIndex
					{
						position43, tokenIndex43 := position, tokenIndex
						if !_rules[rule_]() {
							goto l44
						}
						if buffer[position] != rune('=') {
							goto l44
						}
						position++
						if buffer[position] != rune('=') {
							goto l44
						}
						position++
						if !_rules[rule_]() {
							goto l44
						}
						if !_rules[rulecompare]() {
							goto l44
						}
						if !_rules[ruleAction14]() {
							goto l44
						}
						goto l43
					l44:
						position, tokenIndex = position43, tokenIndex43
						if !_rules[rule_]() {
							goto l42
						}
						if buffer[position] != rune('!') {
							goto l42
						}
						position++
						if buffer[position] != rune('=') {
							goto l42
						}
						position++
						if !_rules[rule_]() {
							goto l42
						}
						if !_rules[rulecompare]() {
							goto l42
						}
						if !_rules[ruleAction15]() {
							goto l42
						}
					}
				l43:
					goto l41
				l42:
					position, tokenIndex = position42, tokenIndex42
				}
				add(ruleequality, position40)
			}
			return true
		l39:
			position, tokenIndex = position39, tokenIndex39
			return false
		},
		/* 10 compare <- <(additive ((_ ('<' '=') _ additive Action16) / (_ ('>' '=') _ additive Action17) / (_ '<' _ additive Action18) / (_ '>' _ additive Action19))*)> */
		func() bool {
			position45, tokenIndex45 := position, tokenIndex
			{
				position46 := position
				if !_rules[ruleadditive]() {
					goto l45
				}
			l47:
				{
					position48, tokenIndex48 := position, tokenIndex
					{
						position49, tokenIndex49 := position, tokenIndex
						if !_rules[rule_]() {
							goto l50
						}
						if buffer[position] != rune('<') {
							goto l50
						}
						position++
						if buffer[position] != rune('=') {
							goto l50
						}
						position++
						if !_rules[rule_]() {
							goto l50
						}
						if !_rules[ruleadditive]() {
							goto l50
						}
						if !_rules[ruleAction16]() {
							goto l50
						}
						goto l49
					l50:
						position, tokenIndex = position49, tokenIndex49
						if !_rules[rule_]() {
							goto l51
						}
						if buffer[position] != rune('>') {
							goto l51
						}
						position++
						if buffer[position] != rune('=') {
							goto l51
						}
						position++
						if !_rules[rule_]() {
							goto l51
						}
						if !_rules[ruleadditive]() {
							goto l51
						}
						if !_rules[ruleAction17]() {
							goto l51
						}
						goto l49
					l51:
						position, tokenIndex = position49, tokenIndex49
						if !_rules[rule_]() {
							goto l52
						}
						if buffer[position] != rune('<') {
							goto l52
						}
						position++
						if !_rules[rule_]() {
							goto l52
						}
						if !_rules[ruleadditive]() {
							goto l52
						}
						if !_rules[ruleAction18]() {
							goto l52
						}
						goto l49
					l52:
						position, tokenIndex = position49, tokenIndex49
						if !_rules[rule_]() {
							goto l48
						}
						if buffer[position] != rune('>') {
							goto l48
						}
						position++
						if !_rules[rule_]() {
							goto l48
						}
						if !_rules[ruleadditive]() {
							goto l48
						}
						if !_rules[ruleAction19]() {
							goto l48
						}
					}
				l49:
					goto l47
				l48:
					position, tokenIndex = position48, tokenIndex48
				}
				add(rulecompare, position46)
			}
			return true
		l45:
			position, tokenIndex = position45, tokenIndex45
			return false
		},
		/* 11 additive <- <(multitive ((_ '+' _ multitive Action20) / (_ '-' _ multitive Action21))*)> */
		func() bool {
			position53, tokenIndex53 := position, tokenIndex
			{
				position54 := position
				if !_rules[rulemultitive]() {
					goto l53
				}
			l55:
				{
					position56, tokenIndex56 := position, tokenIndex
					{
						position57, tokenIndex57 := position, tokenIndex
						if !_rules[rule_]() {
							goto l58
						}
						if buffer[position] != rune('+') {
							goto l58
						}
						position++
						if !_rules[rule_]() {
							goto l58
						}
						if !_rules[rulemultitive]() {
							goto l58
						}
						if !_rules[ruleAction20]() {
							goto l58
						}
						goto l57
					l58:
						position, tokenIndex = position57, tokenIndex57
						if !_rules[rule_]() {
							goto l56
						}
						if buffer[position] != rune('-') {
							goto l56
						}
						position++
						if !_rules[rule_]() {
							goto l56
						}
						if !_rules[rulemultitive]() {
							goto l56
						}
						if !_rules[ruleAction21]() {
							goto l56
						}
					}
				l57:
					goto l55
				l56:
					position, tokenIndex = position56, tokenIndex56
				}
				add(ruleadditive, position54)
			}
			return true
		l53:
			position, tokenIndex = position53, tokenIndex53
			return false
		},
		/* 12 multitive <- <(factor ((_ '*' _ factor Action22) / (_ '/' _ factor Action23) / (_ '%' _ factor Action24))*)> */
		func() bool {
			position59, tokenIndex59 := position, tokenIndex
			{
				position60 := position
				if !_rules[rulefactor]() {
					goto l59
				}
			l61:
				{
					position62, tokenIndex62 := position, tokenIndex
					{
						position63, tokenIndex63 := position, tokenIndex
						if !_rules[rule_]() {
							goto l64
						}
						if buffer[position] != rune('*') {
							goto l64
						}
						position++
						if !_rules[rule_]() {
							goto l64
						}
						if !_rules[rulefactor]() {
							goto l64
						}
						if !_rules[ruleAction22]() {
							goto l64
						}
						goto l63
					l64:
						position, tokenIndex = position63, tokenIndex63
						if !_rules[rule_]() {
							goto l65
						}
						if buffer[position] != rune('/') {
							goto l65
						}
						position++
						if !_rules[rule_]() {
							goto l65
						}
						if !_rules[rulefactor]() {
							goto l65
						}
						if !_rules[ruleAction23]() {
							goto l65
						}
						goto l63
					l65:
						position, tokenIndex = position63, tokenIndex63
						if !_rules[rule_]() {
							goto l62
						}
						if buffer[position] != rune('%') {
							goto l62
						}
						position++
						if !_rules[rule_]() {
							goto l62
						}
						if !_rules[rulefactor]() {
							goto l62
						}
						if !_rules[ruleAction24]() {
							goto l62
						}
					}
				l63:
					goto l61
				l62:
					position, tokenIndex = position62, tokenIndex62
				}
				add(rulemultitive, position60)
			}
			return true
		l59:
			position, tokenIndex = position59, tokenIndex59
			return false
		},
		/* 13 factor <- <(unary / postfix)> */
		func() bool {
			position66, tokenIndex66 := position, tokenIndex
			{
				position67 := position
				{
					position68, tokenIndex68 := position, tokenIndex
					if !_rules[ruleunary]() {
						goto l69
					}
					goto l68
				l69:
					position, tokenIndex = position68, tokenIndex68
					if !_rules[rulepostfix]() {
						goto l66
					}
				}
			l68:
				add(rulefactor, position67)
			}
			return true
		l66:
			position, tokenIndex = position66, tokenIndex66
			return false
		},
		/* 14 unary <- <(((<'-'> Action25) / (<'+'> Action26) / (<'!'> Action27)) _ factor Action28)> */
		func() bool {
			position70, tokenIndex70 := position, tokenIndex
			{
				position71 := position
				{
					position72, tokenIndex72 := position, tokenIndex
					{
						position74 := position
						if buffer[position] != rune('-') {
							goto l73
						}
						position++
						add(rulePegText, position74)
					}
					if !_rules[ruleAction25]() {
						goto l73
					}
					goto l72
				l73:
					position, tokenIndex = position72, tokenIndex72
					{
						position76 := position
						if buffer[position] != rune('+') {
							goto l75
						}
						position++
						add(rulePegText, position76)
					}
					if !_rules[ruleAction26]() {
						goto l75
					}
					goto l72
				l75:
					position, tokenIndex = position72, tokenIndex72
					{
						position77 := position
						if buffer[position] != rune('!') {
							goto l70
						}
						position++
						add(rulePegText, position77)
					}
					if !_rules[ruleAction27]() {
						goto l70
					}
				}
			l72:
				if !_rules[rule_]() {
					goto l70
				}
				if !_rules[rulefactor]() {
					goto l70
				}
				if !_rules[ruleAction28]() {
					goto l70
				}
				add(ruleunary, position71)
			}
			return true
		l70:
			position, tokenIndex = position70, tokenIndex70
			return false
		},
		/* 15 postfix <- <(primary funcall*)> */
		func() bool {
			position78, tokenIndex78 := position, tokenIndex
			{
				position79 := position
				if !_rules[ruleprimary]() {
					goto l78
				}
			l80:
				{
					position81, tokenIndex81 := position, tokenIndex
					if !_rules[rulefuncall]() {
						goto l81
					}
					goto l80
				l81:
					position, tokenIndex = position81, tokenIndex81
				}
				add(rulepostfix, position79)
			}
			return true
		l78:
			position, tokenIndex = position78, tokenIndex78
			return false
		},
		/* 16 funcall <- <((_ '(' Action29 sp _ <')'> Action30) / ('(' Action31 sp _ expression (_ ',' sp _ expression)* (_ ',')? sp _ <')'> Action32))> */
		func() bool {
			position82, tokenIndex82 := position, tokenIndex
			{
				position83 := position
				{
					position84, tokenIndex84 := position, tokenIndex
					if !_rules[rule_]() {
						goto l85
					}
					if buffer[position] != rune('(') {
						goto l85
					}
					position++
					if !_rules[ruleAction29]() {
						goto l85
					}
					if !_rules[rulesp]() {
						goto l85
					}
					if !_rules[rule_]() {
						goto l85
					}
					{
						position86 := position
						if buffer[position] != rune(')') {
							goto l85
						}
						position++
						add(rulePegText, position86)
					}
					if !_rules[ruleAction30]() {
						goto l85
					}
					goto l84
				l85:
					position, tokenIndex = position84, tokenIndex84
					if buffer[position] != rune('(') {
						goto l82
					}
					position++
					if !_rules[ruleAction31]() {
						goto l82
					}
					if !_rules[rulesp]() {
						goto l82
					}
					if !_rules[rule_]() {
						goto l82
					}
					if !_rules[ruleexpression]() {
						goto l82
					}
				l87:
					{
						position88, tokenIndex88 := position, tokenIndex
						if !_rules[rule_]() {
							goto l88
						}
						if buffer[position] != rune(',') {
							goto l88
						}
						position++
						if !_rules[rulesp]() {
							goto l88
						}
						if !_rules[rule_]() {
							goto l88
						}
						if !_rules[ruleexpression]() {
							goto l88
						}
						goto l87
					l88:
						position, tokenIndex = position88, tokenIndex88
					}
					{
						position89, tokenIndex89 := position, tokenIndex
						if !_rules[rule_]() {
							goto l89
						}
						if buffer[position] != rune(',') {
							goto l89
						}
						position++
						goto l90
					l89:
						position, tokenIndex = position89, tokenIndex89
					}
				l90:
					if !_rules[rulesp]() {
						goto l82
					}
					if !_rules[rule_]() {
						goto l82
					}
					{
						position91 := position
						if buffer[position] != rune(')') {
							goto l82
						}
						position++
						add(rulePegText, position91)
					}
					if !_rules[ruleAction32]() {
						goto l82
					}
				}
			l84:
				add(rulefuncall, position83)
			}
			return true
		l82:
			position, tokenIndex = position82, tokenIndex82
			return false
		},
		/* 17 primary <- <(('(' _ sp _ expression _ sp _ ')') / (<[0-9]+> Action33) / identifier)> */
		func() bool {
			position92, tokenIndex92 := position, tokenIndex
			{
				position93 := position
				{
					position94, tokenIndex94 := position, tokenIndex
					if buffer[position] != rune('(') {
						goto l95
					}
					position++
					if !_rules[rule_]() {
						goto l95
					}
					if !_rules[rulesp]() {
						goto l95
					}
					if !_rules[rule_]() {
						goto l95
					}
					if !_rules[ruleexpression]() {
						goto l95
					}
					if !_rules[rule_]() {
						goto l95
					}
					if !_rules[rulesp]() {
						goto l95
					}
					if !_rules[rule_]() {
						goto l95
					}
					if buffer[position] != rune(')') {
						goto l95
					}
					position++
					goto l94
				l95:
					position, tokenIndex = position94, tokenIndex94
					{
						position97 := position
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l96
						}
						position++
					l98:
						{
							position99, tokenIndex99 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l99
							}
							position++
							goto l98
						l99:
							position, tokenIndex = position99, tokenIndex99
						}
						add(rulePegText, position97)
					}
					if !_rules[ruleAction33]() {
						goto l96
					}
					goto l94
				l96:
					position, tokenIndex = position94, tokenIndex94
					if !_rules[ruleidentifier]() {
						goto l92
					}
				}
			l94:
				add(ruleprimary, position93)
			}
			return true
		l92:
			position, tokenIndex = position92, tokenIndex92
			return false
		},
		/* 18 identifier <- <(<(('_' / [a-z] / [A-Z]) ('_' / [a-z] / [A-Z] / [0-9])*)> Action34)> */
		func() bool {
			position100, tokenIndex100 := position, tokenIndex
			{
				position101 := position
				{
					position102 := position
					{
						position103, tokenIndex103 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l104
						}
						position++
						goto l103
					l104:
						position, tokenIndex = position103, tokenIndex103
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l105
						}
						position++
						goto l103
					l105:
						position, tokenIndex = position103, tokenIndex103
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l100
						}
						position++
					}
				l103:
				l106:
					{
						position107, tokenIndex107 := position, tokenIndex
						{
							position108, tokenIndex108 := position, tokenIndex
							if buffer[position] != rune('_') {
								goto l109
							}
							position++
							goto l108
						l109:
							position, tokenIndex = position108, tokenIndex108
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l110
							}
							position++
							goto l108
						l110:
							position, tokenIndex = position108, tokenIndex108
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l111
							}
							position++
							goto l108
						l111:
							position, tokenIndex = position108, tokenIndex108
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l107
							}
							position++
						}
					l108:
						goto l106
					l107:
						position, tokenIndex = position107, tokenIndex107
					}
					add(rulePegText, position102)
				}
				if !_rules[ruleAction34]() {
					goto l100
				}
				add(ruleidentifier, position101)
			}
			return true
		l100:
			position, tokenIndex = position100, tokenIndex100
			return false
		},
		/* 19 _ <- <(' ' / '\t')*> */
		func() bool {
			{
				position113 := position
			l114:
				{
					position115, tokenIndex115 := position, tokenIndex
					{
						position116, tokenIndex116 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l117
						}
						position++
						goto l116
					l117:
						position, tokenIndex = position116, tokenIndex116
						if buffer[position] != rune('\t') {
							goto l115
						}
						position++
					}
				l116:
					goto l114
				l115:
					position, tokenIndex = position115, tokenIndex115
				}
				add(rule_, position113)
			}
			return true
		},
		/* 20 nl <- <('\r' / '\n')+> */
		func() bool {
			position118, tokenIndex118 := position, tokenIndex
			{
				position119 := position
				{
					position122, tokenIndex122 := position, tokenIndex
					if buffer[position] != rune('\r') {
						goto l123
					}
					position++
					goto l122
				l123:
					position, tokenIndex = position122, tokenIndex122
					if buffer[position] != rune('\n') {
						goto l118
					}
					position++
				}
			l122:
			l120:
				{
					position121, tokenIndex121 := position, tokenIndex
					{
						position124, tokenIndex124 := position, tokenIndex
						if buffer[position] != rune('\r') {
							goto l125
						}
						position++
						goto l124
					l125:
						position, tokenIndex = position124, tokenIndex124
						if buffer[position] != rune('\n') {
							goto l121
						}
						position++
					}
				l124:
					goto l120
				l121:
					position, tokenIndex = position121, tokenIndex121
				}
				add(rulenl, position119)
			}
			return true
		l118:
			position, tokenIndex = position118, tokenIndex118
			return false
		},
		/* 21 comment <- <('#' (!('\r' / '\n') .)*)> */
		func() bool {
			position126, tokenIndex126 := position, tokenIndex
			{
				position127 := position
				if buffer[position] != rune('#') {
					goto l126
				}
				position++
			l128:
				{
					position129, tokenIndex129 := position, tokenIndex
					{
						position130, tokenIndex130 := position, tokenIndex
						{
							position131, tokenIndex131 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l132
							}
							position++
							goto l131
						l132:
							position, tokenIndex = position131, tokenIndex131
							if buffer[position] != rune('\n') {
								goto l130
							}
							position++
						}
					l131:
						goto l129
					l130:
						position, tokenIndex = position130, tokenIndex130
					}
					if !matchDot() {
						goto l129
					}
					goto l128
				l129:
					position, tokenIndex = position129, tokenIndex129
				}
				add(rulecomment, position127)
			}
			return true
		l126:
			position, tokenIndex = position126, tokenIndex126
			return false
		},
		/* 22 sp <- <(_ comment? nl _)*> */
		func() bool {
			{
				position134 := position
			l135:
				{
					position136, tokenIndex136 := position, tokenIndex
					if !_rules[rule_]() {
						goto l136
					}
					{
						position137, tokenIndex137 := position, tokenIndex
						if !_rules[rulecomment]() {
							goto l137
						}
						goto l138
					l137:
						position, tokenIndex = position137, tokenIndex137
					}
				l138:
					if !_rules[rulenl]() {
						goto l136
					}
					if !_rules[rule_]() {
						goto l136
					}
					goto l135
				l136:
					position, tokenIndex = position136, tokenIndex136
				}
				add(rulesp, position134)
			}
			return true
		},
		/* 24 Action0 <- <{ p.PushExpressionStatement() }> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		/* 25 Action1 <- <{ p.PopBlock() }> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		nil,
		/* 27 Action2 <- <{ p.PushBlock(begin) }> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 28 Action3 <- <{ p.CompleteBlock(end) }> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 29 Action4 <- <{ p.PushWhile(begin) }> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 30 Action5 <- <{ p.CompleteWhile() }> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 31 Action6 <- <{ p.PushIfPart(begin) }> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 32 Action7 <- <{ p.CompleteIfPart() }> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 33 Action8 <- <{ p.PushElsifPart(begin) }> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		/* 34 Action9 <- <{ p.CompleteElsifPart() }> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
		/* 35 Action10 <- <{ p.PushElsePart(begin) }> */
		func() bool {
			{
				add(ruleAction10, position)
			}
			return true
		},
		/* 36 Action11 <- <{ p.CompleteElsePart() }> */
		func() bool {
			{
				add(ruleAction11, position)
			}
			return true
		},
		/* 37 Action12 <- <{ p.CompleteIf() }> */
		func() bool {
			{
				add(ruleAction12, position)
			}
			return true
		},
		/* 38 Action13 <- <{ p.PushAssign() }> */
		func() bool {
			{
				add(ruleAction13, position)
			}
			return true
		},
		/* 39 Action14 <- <{ p.PushBinOp("==") }> */
		func() bool {
			{
				add(ruleAction14, position)
			}
			return true
		},
		/* 40 Action15 <- <{ p.PushBinOp("!=") }> */
		func() bool {
			{
				add(ruleAction15, position)
			}
			return true
		},
		/* 41 Action16 <- <{ p.PushBinOp("<=") }> */
		func() bool {
			{
				add(ruleAction16, position)
			}
			return true
		},
		/* 42 Action17 <- <{ p.PushBinOp(">=") }> */
		func() bool {
			{
				add(ruleAction17, position)
			}
			return true
		},
		/* 43 Action18 <- <{ p.PushBinOp("<") }> */
		func() bool {
			{
				add(ruleAction18, position)
			}
			return true
		},
		/* 44 Action19 <- <{ p.PushBinOp(">") }> */
		func() bool {
			{
				add(ruleAction19, position)
			}
			return true
		},
		/* 45 Action20 <- <{ p.PushBinOp("+") }> */
		func() bool {
			{
				add(ruleAction20, position)
			}
			return true
		},
		/* 46 Action21 <- <{ p.PushBinOp("-") }> */
		func() bool {
			{
				add(ruleAction21, position)
			}
			return true
		},
		/* 47 Action22 <- <{ p.PushBinOp("*") }> */
		func() bool {
			{
				add(ruleAction22, position)
			}
			return true
		},
		/* 48 Action23 <- <{ p.PushBinOp("/") }> */
		func() bool {
			{
				add(ruleAction23, position)
			}
			return true
		},
		/* 49 Action24 <- <{ p.PushBinOp("%") }> */
		func() bool {
			{
				add(ruleAction24, position)
			}
			return true
		},
		/* 50 Action25 <- <{ p.PushUnaryOp(begin, end, "-") }> */
		func() bool {
			{
				add(ruleAction25, position)
			}
			return true
		},
		/* 51 Action26 <- <{ p.PushUnaryOp(begin, end, "+") }> */
		func() bool {
			{
				add(ruleAction26, position)
			}
			return true
		},
		/* 52 Action27 <- <{ p.PushUnaryOp(begin, end, "!") }> */
		func() bool {
			{
				add(ruleAction27, position)
			}
			return true
		},
		/* 53 Action28 <- <{ p.CompleteUnary() }> */
		func() bool {
			{
				add(ruleAction28, position)
			}
			return true
		},
		/* 54 Action29 <- <{ p.PushApply() }> */
		func() bool {
			{
				add(ruleAction29, position)
			}
			return true
		},
		/* 55 Action30 <- <{ p.CompleteApply(end) }> */
		func() bool {
			{
				add(ruleAction30, position)
			}
			return true
		},
		/* 56 Action31 <- <{ p.PushApply() }> */
		func() bool {
			{
				add(ruleAction31, position)
			}
			return true
		},
		/* 57 Action32 <- <{ p.CompleteApply(end) }> */
		func() bool {
			{
				add(ruleAction32, position)
			}
			return true
		},
		/* 58 Action33 <- <{ p.PushIntLiteral(begin, end, text) }> */
		func() bool {
			{
				add(ruleAction33, position)
			}
			return true
		},
		/* 59 Action34 <- <{ p.PushIdentifier(begin, end, text) }> */
		func() bool {
			{
				add(ruleAction34, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
