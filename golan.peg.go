package golan

// Code generated by peg golan.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleroot
	ruleEOT
	rulestatements
	rulestatement
	ruleexpression
	ruleassign
	ruleequality
	rulecompare
	ruleadditive
	rulemultitive
	rulefactor
	ruleunary
	rulepostfix
	ruleprimary
	ruleidentifier
	rule_
	rulenl
	rulecomment
	rulesp
	ruleAction0
	rulePegText
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
)

var rul3s = [...]string{
	"Unknown",
	"root",
	"EOT",
	"statements",
	"statement",
	"expression",
	"assign",
	"equality",
	"compare",
	"additive",
	"multitive",
	"factor",
	"unary",
	"postfix",
	"primary",
	"identifier",
	"_",
	"nl",
	"comment",
	"sp",
	"Action0",
	"PegText",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	ASTBuilder

	Buffer string
	buffer []rune
	rules  [45]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *Parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.PushExpressionStatement()
		case ruleAction1:
			p.PushWhile(begin)
		case ruleAction2:
			p.PushBlock()
		case ruleAction3:
			p.CompleteWhile()
		case ruleAction4:
			p.PushAssign()
		case ruleAction5:
			p.PushBinOp("==")
		case ruleAction6:
			p.PushBinOp("!=")
		case ruleAction7:
			p.PushBinOp("<=")
		case ruleAction8:
			p.PushBinOp(">=")
		case ruleAction9:
			p.PushBinOp("<")
		case ruleAction10:
			p.PushBinOp(">")
		case ruleAction11:
			p.PushBinOp("+")
		case ruleAction12:
			p.PushBinOp("-")
		case ruleAction13:
			p.PushBinOp("*")
		case ruleAction14:
			p.PushBinOp("/")
		case ruleAction15:
			p.PushBinOp("%")
		case ruleAction16:
			p.PushUnaryOp(begin, end, "-")
		case ruleAction17:
			p.PushUnaryOp(begin, end, "+")
		case ruleAction18:
			p.PushUnaryOp(begin, end, "!")
		case ruleAction19:
			p.CompleteUnary()
		case ruleAction20:
			p.PushApply()
		case ruleAction21:
			p.CompleteApply(end)
		case ruleAction22:
			p.PushIntLiteral(begin, end, text)
		case ruleAction23:
			p.PushIdentifier(begin, end, text)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 root <- <(statements EOT)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulestatements]() {
					goto l0
				}
				if !_rules[ruleEOT]() {
					goto l0
				}
				add(ruleroot, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 EOT <- <!.> */
		func() bool {
			position2, tokenIndex2 := position, tokenIndex
			{
				position3 := position
				{
					position4, tokenIndex4 := position, tokenIndex
					if !matchDot() {
						goto l4
					}
					goto l2
				l4:
					position, tokenIndex = position4, tokenIndex4
				}
				add(ruleEOT, position3)
			}
			return true
		l2:
			position, tokenIndex = position2, tokenIndex2
			return false
		},
		/* 2 statements <- <((sp statement)* sp)> */
		func() bool {
			position5, tokenIndex5 := position, tokenIndex
			{
				position6 := position
			l7:
				{
					position8, tokenIndex8 := position, tokenIndex
					if !_rules[rulesp]() {
						goto l8
					}
					if !_rules[rulestatement]() {
						goto l8
					}
					goto l7
				l8:
					position, tokenIndex = position8, tokenIndex8
				}
				if !_rules[rulesp]() {
					goto l5
				}
				add(rulestatements, position6)
			}
			return true
		l5:
			position, tokenIndex = position5, tokenIndex5
			return false
		},
		/* 3 statement <- <((expression _ comment? nl Action0) / (<('w' 'h' 'i' 'l' 'e')> Action1 _ expression _ '{' Action2 statements '}' Action3))> */
		func() bool {
			position9, tokenIndex9 := position, tokenIndex
			{
				position10 := position
				{
					position11, tokenIndex11 := position, tokenIndex
					if !_rules[ruleexpression]() {
						goto l12
					}
					if !_rules[rule_]() {
						goto l12
					}
					{
						position13, tokenIndex13 := position, tokenIndex
						if !_rules[rulecomment]() {
							goto l13
						}
						goto l14
					l13:
						position, tokenIndex = position13, tokenIndex13
					}
				l14:
					if !_rules[rulenl]() {
						goto l12
					}
					if !_rules[ruleAction0]() {
						goto l12
					}
					goto l11
				l12:
					position, tokenIndex = position11, tokenIndex11
					{
						position15 := position
						if buffer[position] != rune('w') {
							goto l9
						}
						position++
						if buffer[position] != rune('h') {
							goto l9
						}
						position++
						if buffer[position] != rune('i') {
							goto l9
						}
						position++
						if buffer[position] != rune('l') {
							goto l9
						}
						position++
						if buffer[position] != rune('e') {
							goto l9
						}
						position++
						add(rulePegText, position15)
					}
					if !_rules[ruleAction1]() {
						goto l9
					}
					if !_rules[rule_]() {
						goto l9
					}
					if !_rules[ruleexpression]() {
						goto l9
					}
					if !_rules[rule_]() {
						goto l9
					}
					if buffer[position] != rune('{') {
						goto l9
					}
					position++
					if !_rules[ruleAction2]() {
						goto l9
					}
					if !_rules[rulestatements]() {
						goto l9
					}
					if buffer[position] != rune('}') {
						goto l9
					}
					position++
					if !_rules[ruleAction3]() {
						goto l9
					}
				}
			l11:
				add(rulestatement, position10)
			}
			return true
		l9:
			position, tokenIndex = position9, tokenIndex9
			return false
		},
		/* 4 expression <- <(assign / equality)> */
		func() bool {
			position16, tokenIndex16 := position, tokenIndex
			{
				position17 := position
				{
					position18, tokenIndex18 := position, tokenIndex
					if !_rules[ruleassign]() {
						goto l19
					}
					goto l18
				l19:
					position, tokenIndex = position18, tokenIndex18
					if !_rules[ruleequality]() {
						goto l16
					}
				}
			l18:
				add(ruleexpression, position17)
			}
			return true
		l16:
			position, tokenIndex = position16, tokenIndex16
			return false
		},
		/* 5 assign <- <(identifier _ '=' _ expression Action4)> */
		func() bool {
			position20, tokenIndex20 := position, tokenIndex
			{
				position21 := position
				if !_rules[ruleidentifier]() {
					goto l20
				}
				if !_rules[rule_]() {
					goto l20
				}
				if buffer[position] != rune('=') {
					goto l20
				}
				position++
				if !_rules[rule_]() {
					goto l20
				}
				if !_rules[ruleexpression]() {
					goto l20
				}
				if !_rules[ruleAction4]() {
					goto l20
				}
				add(ruleassign, position21)
			}
			return true
		l20:
			position, tokenIndex = position20, tokenIndex20
			return false
		},
		/* 6 equality <- <(compare ((_ ('=' '=') _ compare Action5) / (_ ('!' '=') _ compare Action6))*)> */
		func() bool {
			position22, tokenIndex22 := position, tokenIndex
			{
				position23 := position
				if !_rules[rulecompare]() {
					goto l22
				}
			l24:
				{
					position25, tokenIndex25 := position, tokenIndex
					{
						position26, tokenIndex26 := position, tokenIndex
						if !_rules[rule_]() {
							goto l27
						}
						if buffer[position] != rune('=') {
							goto l27
						}
						position++
						if buffer[position] != rune('=') {
							goto l27
						}
						position++
						if !_rules[rule_]() {
							goto l27
						}
						if !_rules[rulecompare]() {
							goto l27
						}
						if !_rules[ruleAction5]() {
							goto l27
						}
						goto l26
					l27:
						position, tokenIndex = position26, tokenIndex26
						if !_rules[rule_]() {
							goto l25
						}
						if buffer[position] != rune('!') {
							goto l25
						}
						position++
						if buffer[position] != rune('=') {
							goto l25
						}
						position++
						if !_rules[rule_]() {
							goto l25
						}
						if !_rules[rulecompare]() {
							goto l25
						}
						if !_rules[ruleAction6]() {
							goto l25
						}
					}
				l26:
					goto l24
				l25:
					position, tokenIndex = position25, tokenIndex25
				}
				add(ruleequality, position23)
			}
			return true
		l22:
			position, tokenIndex = position22, tokenIndex22
			return false
		},
		/* 7 compare <- <(additive ((_ ('<' '=') _ additive Action7) / (_ ('>' '=') _ additive Action8) / (_ '<' _ additive Action9) / (_ '>' _ additive Action10))*)> */
		func() bool {
			position28, tokenIndex28 := position, tokenIndex
			{
				position29 := position
				if !_rules[ruleadditive]() {
					goto l28
				}
			l30:
				{
					position31, tokenIndex31 := position, tokenIndex
					{
						position32, tokenIndex32 := position, tokenIndex
						if !_rules[rule_]() {
							goto l33
						}
						if buffer[position] != rune('<') {
							goto l33
						}
						position++
						if buffer[position] != rune('=') {
							goto l33
						}
						position++
						if !_rules[rule_]() {
							goto l33
						}
						if !_rules[ruleadditive]() {
							goto l33
						}
						if !_rules[ruleAction7]() {
							goto l33
						}
						goto l32
					l33:
						position, tokenIndex = position32, tokenIndex32
						if !_rules[rule_]() {
							goto l34
						}
						if buffer[position] != rune('>') {
							goto l34
						}
						position++
						if buffer[position] != rune('=') {
							goto l34
						}
						position++
						if !_rules[rule_]() {
							goto l34
						}
						if !_rules[ruleadditive]() {
							goto l34
						}
						if !_rules[ruleAction8]() {
							goto l34
						}
						goto l32
					l34:
						position, tokenIndex = position32, tokenIndex32
						if !_rules[rule_]() {
							goto l35
						}
						if buffer[position] != rune('<') {
							goto l35
						}
						position++
						if !_rules[rule_]() {
							goto l35
						}
						if !_rules[ruleadditive]() {
							goto l35
						}
						if !_rules[ruleAction9]() {
							goto l35
						}
						goto l32
					l35:
						position, tokenIndex = position32, tokenIndex32
						if !_rules[rule_]() {
							goto l31
						}
						if buffer[position] != rune('>') {
							goto l31
						}
						position++
						if !_rules[rule_]() {
							goto l31
						}
						if !_rules[ruleadditive]() {
							goto l31
						}
						if !_rules[ruleAction10]() {
							goto l31
						}
					}
				l32:
					goto l30
				l31:
					position, tokenIndex = position31, tokenIndex31
				}
				add(rulecompare, position29)
			}
			return true
		l28:
			position, tokenIndex = position28, tokenIndex28
			return false
		},
		/* 8 additive <- <(multitive ((_ '+' _ multitive Action11) / (_ '-' _ multitive Action12))*)> */
		func() bool {
			position36, tokenIndex36 := position, tokenIndex
			{
				position37 := position
				if !_rules[rulemultitive]() {
					goto l36
				}
			l38:
				{
					position39, tokenIndex39 := position, tokenIndex
					{
						position40, tokenIndex40 := position, tokenIndex
						if !_rules[rule_]() {
							goto l41
						}
						if buffer[position] != rune('+') {
							goto l41
						}
						position++
						if !_rules[rule_]() {
							goto l41
						}
						if !_rules[rulemultitive]() {
							goto l41
						}
						if !_rules[ruleAction11]() {
							goto l41
						}
						goto l40
					l41:
						position, tokenIndex = position40, tokenIndex40
						if !_rules[rule_]() {
							goto l39
						}
						if buffer[position] != rune('-') {
							goto l39
						}
						position++
						if !_rules[rule_]() {
							goto l39
						}
						if !_rules[rulemultitive]() {
							goto l39
						}
						if !_rules[ruleAction12]() {
							goto l39
						}
					}
				l40:
					goto l38
				l39:
					position, tokenIndex = position39, tokenIndex39
				}
				add(ruleadditive, position37)
			}
			return true
		l36:
			position, tokenIndex = position36, tokenIndex36
			return false
		},
		/* 9 multitive <- <(factor ((_ '*' _ factor Action13) / (_ '/' _ factor Action14) / (_ '%' _ factor Action15))*)> */
		func() bool {
			position42, tokenIndex42 := position, tokenIndex
			{
				position43 := position
				if !_rules[rulefactor]() {
					goto l42
				}
			l44:
				{
					position45, tokenIndex45 := position, tokenIndex
					{
						position46, tokenIndex46 := position, tokenIndex
						if !_rules[rule_]() {
							goto l47
						}
						if buffer[position] != rune('*') {
							goto l47
						}
						position++
						if !_rules[rule_]() {
							goto l47
						}
						if !_rules[rulefactor]() {
							goto l47
						}
						if !_rules[ruleAction13]() {
							goto l47
						}
						goto l46
					l47:
						position, tokenIndex = position46, tokenIndex46
						if !_rules[rule_]() {
							goto l48
						}
						if buffer[position] != rune('/') {
							goto l48
						}
						position++
						if !_rules[rule_]() {
							goto l48
						}
						if !_rules[rulefactor]() {
							goto l48
						}
						if !_rules[ruleAction14]() {
							goto l48
						}
						goto l46
					l48:
						position, tokenIndex = position46, tokenIndex46
						if !_rules[rule_]() {
							goto l45
						}
						if buffer[position] != rune('%') {
							goto l45
						}
						position++
						if !_rules[rule_]() {
							goto l45
						}
						if !_rules[rulefactor]() {
							goto l45
						}
						if !_rules[ruleAction15]() {
							goto l45
						}
					}
				l46:
					goto l44
				l45:
					position, tokenIndex = position45, tokenIndex45
				}
				add(rulemultitive, position43)
			}
			return true
		l42:
			position, tokenIndex = position42, tokenIndex42
			return false
		},
		/* 10 factor <- <(unary / postfix)> */
		func() bool {
			position49, tokenIndex49 := position, tokenIndex
			{
				position50 := position
				{
					position51, tokenIndex51 := position, tokenIndex
					if !_rules[ruleunary]() {
						goto l52
					}
					goto l51
				l52:
					position, tokenIndex = position51, tokenIndex51
					if !_rules[rulepostfix]() {
						goto l49
					}
				}
			l51:
				add(rulefactor, position50)
			}
			return true
		l49:
			position, tokenIndex = position49, tokenIndex49
			return false
		},
		/* 11 unary <- <(((<'-'> Action16) / (<'+'> Action17) / (<'!'> Action18)) _ factor Action19)> */
		func() bool {
			position53, tokenIndex53 := position, tokenIndex
			{
				position54 := position
				{
					position55, tokenIndex55 := position, tokenIndex
					{
						position57 := position
						if buffer[position] != rune('-') {
							goto l56
						}
						position++
						add(rulePegText, position57)
					}
					if !_rules[ruleAction16]() {
						goto l56
					}
					goto l55
				l56:
					position, tokenIndex = position55, tokenIndex55
					{
						position59 := position
						if buffer[position] != rune('+') {
							goto l58
						}
						position++
						add(rulePegText, position59)
					}
					if !_rules[ruleAction17]() {
						goto l58
					}
					goto l55
				l58:
					position, tokenIndex = position55, tokenIndex55
					{
						position60 := position
						if buffer[position] != rune('!') {
							goto l53
						}
						position++
						add(rulePegText, position60)
					}
					if !_rules[ruleAction18]() {
						goto l53
					}
				}
			l55:
				if !_rules[rule_]() {
					goto l53
				}
				if !_rules[rulefactor]() {
					goto l53
				}
				if !_rules[ruleAction19]() {
					goto l53
				}
				add(ruleunary, position54)
			}
			return true
		l53:
			position, tokenIndex = position53, tokenIndex53
			return false
		},
		/* 12 postfix <- <(primary (_ '(' Action20 sp _ (expression (_ ',' (_ comment nl)* _ expression)*)? (_ comment nl)* _ <')'> Action21 _)*)> */
		func() bool {
			position61, tokenIndex61 := position, tokenIndex
			{
				position62 := position
				if !_rules[ruleprimary]() {
					goto l61
				}
			l63:
				{
					position64, tokenIndex64 := position, tokenIndex
					if !_rules[rule_]() {
						goto l64
					}
					if buffer[position] != rune('(') {
						goto l64
					}
					position++
					if !_rules[ruleAction20]() {
						goto l64
					}
					if !_rules[rulesp]() {
						goto l64
					}
					if !_rules[rule_]() {
						goto l64
					}
					{
						position65, tokenIndex65 := position, tokenIndex
						if !_rules[ruleexpression]() {
							goto l65
						}
					l67:
						{
							position68, tokenIndex68 := position, tokenIndex
							if !_rules[rule_]() {
								goto l68
							}
							if buffer[position] != rune(',') {
								goto l68
							}
							position++
						l69:
							{
								position70, tokenIndex70 := position, tokenIndex
								if !_rules[rule_]() {
									goto l70
								}
								if !_rules[rulecomment]() {
									goto l70
								}
								if !_rules[rulenl]() {
									goto l70
								}
								goto l69
							l70:
								position, tokenIndex = position70, tokenIndex70
							}
							if !_rules[rule_]() {
								goto l68
							}
							if !_rules[ruleexpression]() {
								goto l68
							}
							goto l67
						l68:
							position, tokenIndex = position68, tokenIndex68
						}
						goto l66
					l65:
						position, tokenIndex = position65, tokenIndex65
					}
				l66:
				l71:
					{
						position72, tokenIndex72 := position, tokenIndex
						if !_rules[rule_]() {
							goto l72
						}
						if !_rules[rulecomment]() {
							goto l72
						}
						if !_rules[rulenl]() {
							goto l72
						}
						goto l71
					l72:
						position, tokenIndex = position72, tokenIndex72
					}
					if !_rules[rule_]() {
						goto l64
					}
					{
						position73 := position
						if buffer[position] != rune(')') {
							goto l64
						}
						position++
						add(rulePegText, position73)
					}
					if !_rules[ruleAction21]() {
						goto l64
					}
					if !_rules[rule_]() {
						goto l64
					}
					goto l63
				l64:
					position, tokenIndex = position64, tokenIndex64
				}
				add(rulepostfix, position62)
			}
			return true
		l61:
			position, tokenIndex = position61, tokenIndex61
			return false
		},
		/* 13 primary <- <(('(' _ expression _ ')') / (<[0-9]+> Action22) / identifier)> */
		func() bool {
			position74, tokenIndex74 := position, tokenIndex
			{
				position75 := position
				{
					position76, tokenIndex76 := position, tokenIndex
					if buffer[position] != rune('(') {
						goto l77
					}
					position++
					if !_rules[rule_]() {
						goto l77
					}
					if !_rules[ruleexpression]() {
						goto l77
					}
					if !_rules[rule_]() {
						goto l77
					}
					if buffer[position] != rune(')') {
						goto l77
					}
					position++
					goto l76
				l77:
					position, tokenIndex = position76, tokenIndex76
					{
						position79 := position
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l78
						}
						position++
					l80:
						{
							position81, tokenIndex81 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l81
							}
							position++
							goto l80
						l81:
							position, tokenIndex = position81, tokenIndex81
						}
						add(rulePegText, position79)
					}
					if !_rules[ruleAction22]() {
						goto l78
					}
					goto l76
				l78:
					position, tokenIndex = position76, tokenIndex76
					if !_rules[ruleidentifier]() {
						goto l74
					}
				}
			l76:
				add(ruleprimary, position75)
			}
			return true
		l74:
			position, tokenIndex = position74, tokenIndex74
			return false
		},
		/* 14 identifier <- <(<(('_' / [a-z] / [A-Z]) ('_' / [a-z] / [A-Z] / [0-9])*)> Action23)> */
		func() bool {
			position82, tokenIndex82 := position, tokenIndex
			{
				position83 := position
				{
					position84 := position
					{
						position85, tokenIndex85 := position, tokenIndex
						if buffer[position] != rune('_') {
							goto l86
						}
						position++
						goto l85
					l86:
						position, tokenIndex = position85, tokenIndex85
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l87
						}
						position++
						goto l85
					l87:
						position, tokenIndex = position85, tokenIndex85
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l82
						}
						position++
					}
				l85:
				l88:
					{
						position89, tokenIndex89 := position, tokenIndex
						{
							position90, tokenIndex90 := position, tokenIndex
							if buffer[position] != rune('_') {
								goto l91
							}
							position++
							goto l90
						l91:
							position, tokenIndex = position90, tokenIndex90
							if c := buffer[position]; c < rune('a') || c > rune('z') {
								goto l92
							}
							position++
							goto l90
						l92:
							position, tokenIndex = position90, tokenIndex90
							if c := buffer[position]; c < rune('A') || c > rune('Z') {
								goto l93
							}
							position++
							goto l90
						l93:
							position, tokenIndex = position90, tokenIndex90
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l89
							}
							position++
						}
					l90:
						goto l88
					l89:
						position, tokenIndex = position89, tokenIndex89
					}
					add(rulePegText, position84)
				}
				if !_rules[ruleAction23]() {
					goto l82
				}
				add(ruleidentifier, position83)
			}
			return true
		l82:
			position, tokenIndex = position82, tokenIndex82
			return false
		},
		/* 15 _ <- <(' ' / '\t')*> */
		func() bool {
			{
				position95 := position
			l96:
				{
					position97, tokenIndex97 := position, tokenIndex
					{
						position98, tokenIndex98 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l99
						}
						position++
						goto l98
					l99:
						position, tokenIndex = position98, tokenIndex98
						if buffer[position] != rune('\t') {
							goto l97
						}
						position++
					}
				l98:
					goto l96
				l97:
					position, tokenIndex = position97, tokenIndex97
				}
				add(rule_, position95)
			}
			return true
		},
		/* 16 nl <- <('\r' / '\n')+> */
		func() bool {
			position100, tokenIndex100 := position, tokenIndex
			{
				position101 := position
				{
					position104, tokenIndex104 := position, tokenIndex
					if buffer[position] != rune('\r') {
						goto l105
					}
					position++
					goto l104
				l105:
					position, tokenIndex = position104, tokenIndex104
					if buffer[position] != rune('\n') {
						goto l100
					}
					position++
				}
			l104:
			l102:
				{
					position103, tokenIndex103 := position, tokenIndex
					{
						position106, tokenIndex106 := position, tokenIndex
						if buffer[position] != rune('\r') {
							goto l107
						}
						position++
						goto l106
					l107:
						position, tokenIndex = position106, tokenIndex106
						if buffer[position] != rune('\n') {
							goto l103
						}
						position++
					}
				l106:
					goto l102
				l103:
					position, tokenIndex = position103, tokenIndex103
				}
				add(rulenl, position101)
			}
			return true
		l100:
			position, tokenIndex = position100, tokenIndex100
			return false
		},
		/* 17 comment <- <('#' (!('\r' / '\n') .)*)> */
		func() bool {
			position108, tokenIndex108 := position, tokenIndex
			{
				position109 := position
				if buffer[position] != rune('#') {
					goto l108
				}
				position++
			l110:
				{
					position111, tokenIndex111 := position, tokenIndex
					{
						position112, tokenIndex112 := position, tokenIndex
						{
							position113, tokenIndex113 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l114
							}
							position++
							goto l113
						l114:
							position, tokenIndex = position113, tokenIndex113
							if buffer[position] != rune('\n') {
								goto l112
							}
							position++
						}
					l113:
						goto l111
					l112:
						position, tokenIndex = position112, tokenIndex112
					}
					if !matchDot() {
						goto l111
					}
					goto l110
				l111:
					position, tokenIndex = position111, tokenIndex111
				}
				add(rulecomment, position109)
			}
			return true
		l108:
			position, tokenIndex = position108, tokenIndex108
			return false
		},
		/* 18 sp <- <(_ comment? nl _)*> */
		func() bool {
			{
				position116 := position
			l117:
				{
					position118, tokenIndex118 := position, tokenIndex
					if !_rules[rule_]() {
						goto l118
					}
					{
						position119, tokenIndex119 := position, tokenIndex
						if !_rules[rulecomment]() {
							goto l119
						}
						goto l120
					l119:
						position, tokenIndex = position119, tokenIndex119
					}
				l120:
					if !_rules[rulenl]() {
						goto l118
					}
					if !_rules[rule_]() {
						goto l118
					}
					goto l117
				l118:
					position, tokenIndex = position118, tokenIndex118
				}
				add(rulesp, position116)
			}
			return true
		},
		/* 20 Action0 <- <{ p.PushExpressionStatement() }> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		nil,
		/* 22 Action1 <- <{ p.PushWhile(begin) }> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 23 Action2 <- <{ p.PushBlock() }> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 24 Action3 <- <{ p.CompleteWhile() }> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 25 Action4 <- <{ p.PushAssign() }> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 26 Action5 <- <{ p.PushBinOp("==") }> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 27 Action6 <- <{ p.PushBinOp("!=") }> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 28 Action7 <- <{ p.PushBinOp("<=") }> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 29 Action8 <- <{ p.PushBinOp(">=") }> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		/* 30 Action9 <- <{ p.PushBinOp("<") }> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
		/* 31 Action10 <- <{ p.PushBinOp(">") }> */
		func() bool {
			{
				add(ruleAction10, position)
			}
			return true
		},
		/* 32 Action11 <- <{ p.PushBinOp("+") }> */
		func() bool {
			{
				add(ruleAction11, position)
			}
			return true
		},
		/* 33 Action12 <- <{ p.PushBinOp("-") }> */
		func() bool {
			{
				add(ruleAction12, position)
			}
			return true
		},
		/* 34 Action13 <- <{ p.PushBinOp("*") }> */
		func() bool {
			{
				add(ruleAction13, position)
			}
			return true
		},
		/* 35 Action14 <- <{ p.PushBinOp("/") }> */
		func() bool {
			{
				add(ruleAction14, position)
			}
			return true
		},
		/* 36 Action15 <- <{ p.PushBinOp("%") }> */
		func() bool {
			{
				add(ruleAction15, position)
			}
			return true
		},
		/* 37 Action16 <- <{ p.PushUnaryOp(begin, end, "-") }> */
		func() bool {
			{
				add(ruleAction16, position)
			}
			return true
		},
		/* 38 Action17 <- <{ p.PushUnaryOp(begin, end, "+") }> */
		func() bool {
			{
				add(ruleAction17, position)
			}
			return true
		},
		/* 39 Action18 <- <{ p.PushUnaryOp(begin, end, "!") }> */
		func() bool {
			{
				add(ruleAction18, position)
			}
			return true
		},
		/* 40 Action19 <- <{ p.CompleteUnary() }> */
		func() bool {
			{
				add(ruleAction19, position)
			}
			return true
		},
		/* 41 Action20 <- <{ p.PushApply() }> */
		func() bool {
			{
				add(ruleAction20, position)
			}
			return true
		},
		/* 42 Action21 <- <{ p.CompleteApply(end) }> */
		func() bool {
			{
				add(ruleAction21, position)
			}
			return true
		},
		/* 43 Action22 <- <{ p.PushIntLiteral(begin, end, text) }> */
		func() bool {
			{
				add(ruleAction22, position)
			}
			return true
		},
		/* 44 Action23 <- <{ p.PushIdentifier(begin, end, text) }> */
		func() bool {
			{
				add(ruleAction23, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
