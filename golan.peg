package golan

type Parser Peg {
	ASTBuilder
}

root <- statements EOT

EOT <- !.

statements <- (_ sp _ statement)* _ sp _

statement <- (
	expression _ comment? nl { p.PushExpressionStatement() } /
    block { p.PopBlock() } /
	while /
	if
)

block <- <'{'> { p.PushBlock(begin) } statements <'}'> { p.CompleteBlock(end) }

while <-
	<'while'> { p.PushWhile(begin) } _ expression _ block { p.CompleteWhile() }

if <-
	<'if'> { p.PushIfPart(begin) }  _ expression _ sp _ block { p.CompleteIfPart() }
	(sp _ <'elsif'> { p.PushElsifPart(begin) } _ expression _ sp _ block { p.CompleteElsifPart() })*
	(sp _ <'else'> { p.PushElsePart(begin) } _ sp _ block { p.CompleteElsePart() })?
	{ p.CompleteIf() }

expression <- assign / equality

assign <- identifier _ '=' _ expression		{ p.PushAssign() }

equality <- compare (
	_ '==' _ compare	{ p.PushBinOp("==") } /
	_ '!=' _ compare	{ p.PushBinOp("!=") }
)*

compare <- additive (
	_ '<=' _ additive	{ p.PushBinOp("<=") } /
	_ '>=' _ additive	{ p.PushBinOp(">=") } /
	_ '<' _ additive	{ p.PushBinOp("<") } /
	_ '>' _ additive	{ p.PushBinOp(">") }
)*

additive <- multitive (
	_ '+' _ multitive	{ p.PushBinOp("+") } /
	_ '-' _ multitive	{ p.PushBinOp("-") }
)*

multitive <- factor (
	_ '*' _ factor	{ p.PushBinOp("*") } /
	_ '/' _ factor	{ p.PushBinOp("/") } /
	_ '%' _ factor	{ p.PushBinOp("%") }
)*

factor <- unary / postfix

unary <- (
	<'-'> { p.PushUnaryOp(begin, end, "-") } /
	<'+'> { p.PushUnaryOp(begin, end, "+") } /
	<'!'> { p.PushUnaryOp(begin, end, "!") }
) _ factor { p.CompleteUnary() }

postfix <- primary funcall*

funcall <- ( _
	'(' { p.PushApply() } sp _ <')'> { p.CompleteApply(end) } /	
	'(' { p.PushApply() } sp _ expression
	(_ ',' sp _ expression)*
	(_ ',')?
	sp _ <')'> { p.CompleteApply(end) }
)

primary <-
	'(' _ sp _ expression _ sp _ ')' /
	<[0-9]+>	{ p.PushIntLiteral(begin, end, text) } /
	identifier

identifier <- <[_a-zA-Z][_a-zA-Z0-9]*>	{ p.PushIdentifier(begin, end, text) }

_ <- [ \t]*

nl <- [\r\n]+

comment <- '#' [^\r\n]*

sp <- (_ comment? nl _)*

